{"version":3,"sources":["components/buttons/rocketbelt.dynamic-button.min.js"],"names":["$","dynamicButton","el","base","this","$el","data","init","opts","extend","defaultOptions","baseText","text","busyText","successText","failureText","empty","append","btnClass","baseWidth","outerWidth","on","e","btn","find","prop","css","addClass","trigger","type","call","statusMsg","customDelay","stateText","btnStateIcon","textSlot","delay","hide","indexOf","removeClass","show","setTimeout","buttonReset","fn","options","method","methodResult","methods","apply","Array","prototype","slice","arguments","console","warn","each","jQuery"],"mappings":"CAAA,SAAWA,GACTA,EAAEC,cAAgB,SAAUC,GAC1B,IAAIC,EAAOC,KACXD,EAAKD,GAAKA,EACVC,EAAKE,IAAML,EAAEE,GACbC,EAAKE,IAAIC,KAAK,gBAAiBH,GAE/BA,EAAKI,KAAO,WACVJ,EAAKK,KAAOR,EAAES,UAAWT,EAAEC,cAAcS,gBACzCP,EAAKK,KAAKG,SAAWR,EAAKE,IAAIO,QAAUT,EAAKK,KAAKG,SAClDR,EAAKK,KAAKK,SAAWV,EAAKE,IAAIC,KAAK,cAAgBH,EAAKK,KAAKK,SAC7DV,EAAKK,KAAKM,YAAcX,EAAKE,IAAIC,KAAK,iBAAmBH,EAAKK,KAAKM,YACnEX,EAAKK,KAAKO,YAAcZ,EAAKE,IAAIC,KAAK,iBAAmBH,EAAKK,KAAKO,YAYlEZ,EAAQ,IACRa,QACEC,OAZH,WAKE,MAJa,mCAAqCd,EAAKK,KAAKG,SAAW,mDAczE,IAAIA,EAAWR,EAAKK,KAAKG,SAErBO,EAAWf,EAAKK,KAAKK,SAAW,qCAAuC,cACvEM,EAAYhB,EAAKE,IAAIe,aAGzBjB,EAAKE,IAAIgB,GAAG,QAAS,SAAUC,IAiBjC,SAA0BJ,EAAUC,GAElC,IAAII,EAAMvB,EAAEI,MACCmB,EAAIC,KAAK,sBAEbZ,KAAKT,EAAKK,KAAKK,SAAWV,EAAKK,KAAKK,SAAWV,EAAKK,KAAKG,UAClEY,EAAIE,KAAK,YAAY,GAClBC,IAAI,YAAaP,GACjBQ,SAAST,GAEZf,EAAKE,IAAIuB,SACPC,KAAM,qBACN3B,GAAIC,EAAKD,OA5BQ4B,KAAK1B,KAAMc,EAAUC,KAGxChB,EAAKE,IAAIgB,GAAG,uBAAwB,SAAUC,EAAGS,EAAWC,GAC1D,GAAkB,YAAdD,EACEE,EAAY9B,EAAKK,KAAKM,YAE5B,GAAkB,YAAdiB,EACF,IAAIE,EAAY9B,EAAKK,KAAKO,aAwBhC,SAA8BgB,EAAWC,EAAad,EAAUC,EAAWR,EAAUsB,GACnF,IAAIV,EAAMvB,EAAEI,MACV8B,EAAeX,EAAIC,KAAK,sBACxBW,EAAWZ,EAAIC,KAAK,sBACpBY,EAAQJ,GAAe,EAIzBT,EAAIG,IAAI,YAAaH,EAAIH,cACzBc,EAAaG,QAHQ,UAAW,WAKdC,QAAQP,IAAc,IACtCK,EAAQJ,GAAe,IAEvBT,EAAIgB,YAAYrB,GAChBA,EAAWe,EAAY,yBAA2B,GAClDf,GAAY,WAAaa,EAEzBR,EAAIG,IAAI,YAAaP,GACrBI,EAAII,SAAST,GACbiB,EAASvB,KAAKqB,IAGhBC,EAAaM,OAEbC,WAAW,YAKb,SAAqBlB,EAAKL,EAAUiB,EAAUxB,GAC5CwB,EAASvB,KAAKD,GACdY,EAAIE,KAAK,YAAY,GAClBc,YAAYrB,GAPbwB,CAAYnB,EAAKL,EAAUiB,EAAUxB,IACpCyB,KAjDoBN,KAAK1B,KAAM2B,EAAWC,EAAad,EAAUC,EAAWR,EAAUsB,MAI3F9B,EAAKI,QAwDPP,EAAEC,cAAcS,gBACdC,SAAU,GACVE,SAAU,MAGZb,EAAE2C,GAAG1C,cAAgB,SAAU2C,GAC7B,IAAI3C,EAAe4C,EAAQC,EAC3B,MAAuB,iBAAZF,GACTC,EAASD,GACT3C,EAAgBG,KAAKE,KAAK,oBAEpBL,EAAc8C,QAAQF,GACxBC,EAAe7C,EAAc8C,QAAQF,GAAQG,MAAM/C,EAAegD,MAAMC,UAAUC,MAAMrB,KAAKsB,UAAW,IAExGC,QAAQC,KAAK,cAAgBT,EAAS,sCAGnCC,GAAgB1C,MAElBA,KAAKmD,KAAK,WACfvD,EAAEM,KAAKF,KAAM,kBAAoB,IAAKJ,EAAEC,cAAcG,KAAMwC,MA9HlE,CAiIGY","file":"rocketbelt.dynamic-button.min.js","sourcesContent":["(function ($) {\n  $.dynamicButton = function (el) {\n    var base = this;\n    base.el = el;\n    base.$el = $(el);\n    base.$el.data('dynamicButton', base);\n\n    base.init = function () {\n      base.opts = $.extend({}, $.dynamicButton.defaultOptions);\n      base.opts.baseText = base.$el.text() || base.opts.baseText;\n      base.opts.busyText = base.$el.data('busy-text') || base.opts.busyText;\n      base.opts.successText = base.$el.data('success-text') || base.opts.successText;\n      base.opts.failureText = base.$el.data('failure-text') || base.opts.failureText;\n\n      function dynamicElements() {\n        var textEl = '<span class=\"button-state-text\">' + base.opts.baseText + '</span>';\n        var busyIcon = '<span class=\"button-state-icon\"></span>';\n        var newStructure = textEl + busyIcon;\n\n        return newStructure;\n      }\n\n\n      // Build Button DOM\n      (base.$el)\n      .empty()\n        .append(dynamicElements);\n\n      // Init Variables\n      var baseText = base.opts.baseText;\n      // Because button has to go into a busy state first, we initilize btnClass with \"busy\" classes\n      var btnClass = base.opts.busyText ? 'button-busy button-state-with-text' : 'button-busy';\n      var baseWidth = base.$el.outerWidth();\n\n      // Event attachment\n      base.$el.on('click', function (e) {\n        buttonActionBusy.call(this, btnClass, baseWidth);\n      });\n\n      base.$el.on('buttonActionComplete', function (e, statusMsg, customDelay) {\n        if (statusMsg === 'success') {\n          var stateText = base.opts.successText;\n        }\n        if (statusMsg === 'failure') {\n          var stateText = base.opts.failureText;\n        }\n        buttonActionComplete.call(this, statusMsg, customDelay, btnClass, baseWidth, baseText, stateText);\n      });\n    };\n\n    base.init();\n\n    function buttonActionBusy(btnClass, baseWidth) {\n      // busyClass arg here is determined whether/not busy-state has text\n      var btn = $(this),\n        textSlot = btn.find('.button-state-text');\n\n      textSlot.text(base.opts.busyText ? base.opts.busyText : base.opts.baseText);\n      btn.prop('disabled', true)\n        .css('min-width', baseWidth)\n        .addClass(btnClass);\n\n      base.$el.trigger({\n        type: 'dynamicButton.busy',\n        el: base.el\n      });\n    }\n\n    function buttonActionComplete(statusMsg, customDelay, btnClass, baseWidth, baseText, stateText) {\n      var btn = $(this),\n        btnStateIcon = btn.find('.button-state-icon'),\n        textSlot = btn.find('.button-state-text'),\n        delay = customDelay || 0;\n\n      var recognizedMsg = ['success', 'failure'];\n\n      btn.css('min-width', btn.outerWidth());\n      btnStateIcon.hide();\n\n      if (recognizedMsg.indexOf(statusMsg) > -1) {\n        delay = customDelay || 2000;\n\n        btn.removeClass(btnClass);\n        btnClass = stateText ? 'button-state-with-text' : '';\n        btnClass += ' button-' + statusMsg;\n\n        btn.css('min-width', baseWidth);\n        btn.addClass(btnClass);\n        textSlot.text(stateText);\n      }\n\n      btnStateIcon.show();\n\n      setTimeout(function () {\n        buttonReset(btn, btnClass, textSlot, baseText);\n      }, delay);\n    }\n\n    function buttonReset(btn, btnClass, textSlot, baseText) {\n      textSlot.text(baseText);\n      btn.prop('disabled', false)\n        .removeClass(btnClass);\n    }\n\n  };\n\n  $.dynamicButton.defaultOptions = {\n    baseText: '',\n    busyText: null\n  };\n\n  $.fn.dynamicButton = function (options) {\n    var dynamicButton, method, methodResult;\n    if (typeof options === 'string') {\n      method = options;\n      dynamicButton = this.data('dynamicButton');\n      if (dynamicButton) {\n        if (dynamicButton.methods[method]) {\n          methodResult = dynamicButton.methods[method].apply(dynamicButton, Array.prototype.slice.call(arguments, 1));\n        } else {\n          console.warn('The method ' + method + ' does not exist in dynamicButton.');\n        }\n      }\n      return methodResult || this;\n    }\n    return this.each(function () {\n      $.data(this, 'dynamicButton') || (new $.dynamicButton(this, options));\n    });\n  };\n})(jQuery);\n"],"sourceRoot":"../.."}