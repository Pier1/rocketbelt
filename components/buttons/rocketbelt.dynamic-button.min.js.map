{"version":3,"sources":["components/buttons/rocketbelt.dynamic-button.min.js"],"names":["$","dynamicButton","el","base","this","$el","data","init","opts","extend","defaultOptions","baseText","text","busyText","successText","failureText","empty","append","baseWidth","outerWidth","btnClass","on","e","textSlot","btn","find","trigger","type","addClass","buttonActionComplete","call","statusMsg","customDelay","stateText","recognizedMsg","btnStateIcon","css","removeClass","indexOf","delay","setTimeout","show","buttonReset","options","method","methodResult","console","methods","apply","Array","prototype","slice","arguments","warn","each","jQuery"],"mappings":"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","file":"rocketbelt.dynamic-button.min.js","sourcesContent":["(function ($) {\n  $.dynamicButton = function (el) {\n    var base = this;\n    base.el = el;\n    base.$el = $(el);\n    base.$el.data('dynamicButton', base);\n\n    base.init = function () {\n      base.opts = $.extend({}, $.dynamicButton.defaultOptions);\n      base.opts.baseText = base.$el.text() || base.opts.baseText;\n      base.opts.busyText = base.$el.data('busy-text') || base.opts.busyText;\n      base.opts.successText = base.$el.data('success-text') || base.opts.successText;\n      base.opts.failureText = base.$el.data('failure-text') || base.opts.failureText;\n\n      function dynamicElements() {\n        var textEl = '<span class=\"button-state-text\">' + base.opts.baseText + '</span>';\n        var busyIcon = '<span class=\"button-state-icon\"></span>';\n        var newStructure = textEl + busyIcon;\n\n        return newStructure;\n      }\n\n\n      // Build Button DOM\n      (base.$el)\n      .empty()\n        .append(dynamicElements);\n\n      // Init Variables\n      var baseText = base.opts.baseText;\n      // Because button has to go into a busy state first, we initilize btnClass with \"busy\" classes\n      var btnClass = base.opts.busyText ? 'button-busy button-state-with-text' : 'button-busy';\n      var baseWidth = base.$el.outerWidth();\n\n      // Event attachment\n      base.$el.on('click buttonActionBusy', function (e) {\n        buttonActionBusy.call(this, btnClass, baseWidth);\n      });\n\n      base.$el.on('buttonActionComplete', function (e, statusMsg, customDelay) {\n        if (statusMsg === 'success') {\n          var stateText = base.opts.successText;\n        }\n        if (statusMsg === 'failure') {\n          var stateText = base.opts.failureText;\n        }\n        buttonActionComplete.call(this, statusMsg, customDelay, btnClass, baseWidth, baseText, stateText);\n      });\n    };\n\n    base.init();\n\n    function buttonActionBusy(btnClass, baseWidth) {\n      // busyClass arg here is determined whether/not busy-state has text\n      var btn = $(this),\n        textSlot = btn.find('.button-state-text');\n\n      textSlot.text(base.opts.busyText ? base.opts.busyText : base.opts.baseText);\n      btn.prop('disabled', true)\n        .css('min-width', baseWidth)\n        .addClass(btnClass);\n\n      base.$el.trigger({\n        type: 'dynamicButton.busy',\n        el: base.el\n      });\n    }\n\n    function buttonActionComplete(statusMsg, customDelay, btnClass, baseWidth, baseText, stateText) {\n      var btn = $(this),\n        btnStateIcon = btn.find('.button-state-icon'),\n        textSlot = btn.find('.button-state-text'),\n        delay = customDelay || 0;\n\n      var recognizedMsg = ['success', 'failure'];\n\n      btn.css('min-width', btn.outerWidth());\n      btnStateIcon.hide();\n\n      if (recognizedMsg.indexOf(statusMsg) > -1) {\n        delay = customDelay || 2000;\n\n        btn.removeClass(btnClass);\n        btnClass = stateText ? 'button-state-with-text' : '';\n        btnClass += ' button-' + statusMsg;\n\n        btn.css('min-width', baseWidth);\n        btn.addClass(btnClass);\n        textSlot.text(stateText);\n      }\n\n      btnStateIcon.show();\n\n      setTimeout(function () {\n        buttonReset(btn, btnClass, textSlot, baseText);\n      }, delay);\n    }\n\n    function buttonReset(btn, btnClass, textSlot, baseText) {\n      textSlot.text(baseText);\n      btn.prop('disabled', false)\n        .removeClass(btnClass);\n    }\n\n  };\n\n  $.dynamicButton.defaultOptions = {\n    baseText: '',\n    busyText: null\n  };\n\n  $.fn.dynamicButton = function (options) {\n    var dynamicButton, method, methodResult;\n    if (typeof options === 'string') {\n      method = options;\n      dynamicButton = this.data('dynamicButton');\n      if (dynamicButton) {\n        if (dynamicButton.methods[method]) {\n          methodResult = dynamicButton.methods[method].apply(dynamicButton, Array.prototype.slice.call(arguments, 1));\n        } else {\n          console.warn('The method ' + method + ' does not exist in dynamicButton.');\n        }\n      }\n      return methodResult || this;\n    }\n    return this.each(function () {\n      $.data(this, 'dynamicButton') || (new $.dynamicButton(this, options));\n    });\n  };\n})(jQuery);\n"],"sourceRoot":"../.."}