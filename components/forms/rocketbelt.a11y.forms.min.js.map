{"version":3,"sources":["components/forms/rocketbelt.a11y.forms.min.js"],"names":["window","document","onClassMutation","mutations","mutationsLen","length","k","mutation","el","target","message","parentNode","querySelector","oldValue","classList","contains","setAttribute","removeAttribute","decorateInputs","formEls","querySelectorAll","formElsLen","i","formEl","MutationObserver","observe","subtree","attributes","attributeOldValue","attributeFilter","messages","msgLen","describedByIds","j","thisMsg","id","rb","getShortId","hasAttribute","trim","onDocumentReady"],"mappings":"CAAA,SAA8BA,EAAQC,GACpC,QAASC,GAAgBC,GAGvB,IAAK,GAFDC,GAAeD,EAAUE,OAEpBC,EAAI,EAAGA,EAAIF,EAAcE,IAAK,CACrC,GAAIC,GAAWJ,EAAUG,GACrBE,EAAKD,EAASE,OACdC,EAAUF,EAAGG,WAAWC,cAAc,sBAEhB,aAAtBL,EAASM,UAA0BN,EAASE,OAAOK,UAAUC,SAAS,YAExEP,EAAGQ,aAAa,eAAgB,QAChCN,EAAQM,aAAa,OAAQ,SAC7BN,EAAQM,aAAa,YAAa,WACH,YAAtBT,EAASM,UAA2BL,EAAGM,UAAUC,SAAS,aAEnEP,EAAGQ,aAAa,eAAgB,SAChCN,EAAQO,gBAAgB,QACxBP,EAAQO,gBAAgB,eAK9B,QAASC,KAIP,IAAK,GAHDC,GAAUlB,EAASmB,iBAAiB,qFACpCC,EAAaF,EAAQd,OAEhBiB,EAAI,EAAGA,EAAID,EAAYC,IAAK,CACnC,GAAIC,GAASJ,EAAQG,EAGN,IAAIE,kBAAiB,SAAUrB,GAAaD,EAAgBC,KAClEsB,QAAQF,GAAUG,SAAS,EAAOC,YAAY,EAAMC,mBAAmB,EAAMC,iBAAkB,UAMxG,KAAK,GAJDC,GAAWP,EAAOZ,WAAWS,iBAAiB,qCAC9CW,EAASD,EAASzB,OAClB2B,EAAiB,GAEZC,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAC/B,GAAIC,GAAUJ,EAASG,GACnBE,EAAK,WAAanC,EAAOoC,GAAGC,YAChCL,IAAkBG,EAAK,IAGlBD,EAAQC,KACXD,EAAQC,GAAKA,GAIZZ,EAAOe,aAAa,qBACvBf,EAAOP,aAAa,mBAAoBgB,EAAeO,SAK7DvC,EAAOoC,GAAGI,gBAAgBtB,IACzBlB,OAAQC","file":"rocketbelt.a11y.forms.min.js","sourcesContent":["(function rocketbeltA11yForms(window, document) {\n  function onClassMutation(mutations) {\n    var mutationsLen = mutations.length;\n\n    for (var k = 0; k < mutationsLen; k++) {\n      var mutation = mutations[k];\n      var el = mutation.target;\n      var message = el.parentNode.querySelector('.validation-message');\n\n      if (mutation.oldValue !== 'invalid' && mutation.target.classList.contains('invalid')) {\n        // If \"invalid\" was added, do the decoratin'\n        el.setAttribute('aria-invalid', 'true');\n        message.setAttribute('role', 'alert');\n        message.setAttribute('aria-live', 'polite');\n      } else if (mutation.oldValue === 'invalid' && !el.classList.contains('invalid')) {\n        // If \"invalid\" was removed\n        el.setAttribute('aria-invalid', 'false');\n        message.removeAttribute('role');\n        message.removeAttribute('aria-live');\n      }\n    }\n  }\n\n  function decorateInputs() {\n    var formEls = document.querySelectorAll('.form-group input, .form-group select, .form-group textarea, .form-group fieldset');\n    var formElsLen = formEls.length;\n\n    for (var i = 0; i < formElsLen; i++) {\n      var formEl = formEls[i];\n\n      // Set an observer to listen for .invalid.\n      var observer = new MutationObserver(function (mutations) { onClassMutation(mutations); });\n      observer.observe(formEl, { subtree: false, attributes: true, attributeOldValue: true, attributeFilter: ['class'] });\n\n      var messages = formEl.parentNode.querySelectorAll('.validation-message, .helper-text');\n      var msgLen = messages.length;\n      var describedByIds = '';\n\n      for (var j = 0; j < msgLen; j++) {\n        var thisMsg = messages[j];\n        var id = 'rb-a11y_' + window.rb.getShortId();\n        describedByIds += id + ' ';\n\n        // Don't clobber any existing attributes!\n        if (!thisMsg.id) {\n          thisMsg.id = id;\n        }\n      }\n\n      if (!formEl.hasAttribute('aria-describedby')) {\n        formEl.setAttribute('aria-describedby', describedByIds.trim());\n      }\n    }\n  }\n\n  window.rb.onDocumentReady(decorateInputs);\n})(window, document);\n"],"sourceRoot":"../.."}