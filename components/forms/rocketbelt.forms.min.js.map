{"version":3,"sources":["components/forms/rocketbelt.forms.min.js"],"names":["rb","document","decorateInputs","formEls","querySelectorAll","formElsLen","length","_loop","el","i","classList","add","onClassMutation","mutations","mutationsLen","k","mutation","target","querySelector","describedByErrorId","describedByIds","oldValue","contains","setAttribute","aria","invalid","DESCRIBED_BY_ERROR_ID_ATTR","getAttribute","message","role","push","join","removeAttribute","live","splice","describedby","observe","observer","subtree","attributes","attributeOldValue","messages","parentNode","msgLen","hasAttribute","j","thisMsg","id","getShortId","trim","formsAndGroups","_loop2","addEventListener","checkValidity","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","forms","window"],"mappings":"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","file":"rocketbelt.forms.min.js","sourcesContent":["'use strict';\n((rb, document) => {\n  const aria = rb.aria;\n  const DESCRIBED_BY_ERROR_ID_ATTR = 'data-rb-describedbyerrorid';\n\n  function onClassMutation(mutations) {\n    const mutationsLen = mutations.length;\n\n    for (let k = 0; k < mutationsLen; k++) {\n      const mutation = mutations[k];\n      const el = mutation.target;\n      const message = el.parentNode.querySelector('.validation-message');\n\n      let describedByErrorId = '';\n      let describedByIds = [];\n      let i = -1;\n\n      if (mutation.oldValue !== 'invalid' && mutation.target.classList.contains('invalid')) {\n        // If \"invalid\" was added, do the decoratin'\n        el.setAttribute(aria.invalid, 'true');\n        describedByErrorId = el.getAttribute(DESCRIBED_BY_ERROR_ID_ATTR);\n        describedByIds = el.getAttribute(aria.describedby).split(' ');\n        i = describedByIds.indexOf(describedByErrorId);\n\n        if (message) {\n          message.setAttribute(aria.role, 'alert');\n          message.setAttribute(aria.live, 'polite');\n\n          // If a validation message exists && the related element is newly invalid,\n          // add message id to described-by\n          if (i === -1) {\n            describedByIds.push(describedByErrorId);\n            el.setAttribute(aria.describedby, describedByIds.join(' '));\n          }\n        }\n      } else if (mutation.oldValue === 'invalid' && !el.classList.contains('invalid')) {\n        // If \"invalid\" was removed\n        el.setAttribute(aria.invalid, 'false');\n        describedByErrorId = el.getAttribute(DESCRIBED_BY_ERROR_ID_ATTR);\n        describedByIds = el.getAttribute(aria.describedby).split(' ');\n        i = describedByIds.indexOf(describedByErrorId);\n\n        if (message) {\n          message.removeAttribute('role');\n          message.removeAttribute(aria.live);\n\n          // If a validation message exists && the related element longer invalid,\n          // remove message id from described-by\n          if (i > -1) {\n            describedByIds.splice(i, 1);\n            el.setAttribute(aria.describedby, describedByIds.join(' '));\n          }\n        }\n      }\n    }\n  }\n\n  function decorateInputs() {\n    const formEls = document.querySelectorAll(\n      '.form-group input, .form-group select, .form-group textarea, .form-group fieldset'\n    );\n    const formElsLen = formEls.length;\n\n    for (let i = 0; i < formElsLen; i++) {\n      const el = formEls[i];\n\n      // \"invalid\" will be raised by the checkValidity() call below.\n      // .invalid is added and will be handled by the MutationObserver\n      // created by this function.\n      // https://daverupert.com/2017/11/happier-html5-forms/\n      el.addEventListener('invalid', () => {\n        el.classList.add('invalid');\n      }, false);\n\n      // Set an observer to listen for .invalid.\n      const observer = new MutationObserver(mutations => { onClassMutation(mutations); });\n      observer.observe(el, {\n        subtree: false,\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: ['class']\n      });\n\n      const messages = el.parentNode.querySelectorAll('.validation-message, .helper-text');\n      const msgLen = messages.length;\n\n      if (msgLen > 0) {\n        let describedByIds = '';\n\n        if (el.hasAttribute(aria.describedby)) {\n          describedByIds = `${el.getAttribute(aria.describedby)} `;\n        }\n\n        for (let j = 0; j < msgLen; j++) {\n          const thisMsg = messages[j];\n          const id = thisMsg.id ? thisMsg.id : `rb-a11y_${rb.getShortId()}`;\n          describedByIds += `${id} `;\n\n          if (thisMsg.classList.contains('validation-message')) {\n            el.setAttribute(DESCRIBED_BY_ERROR_ID_ATTR, id);\n          }\n\n          // Don't clobber any existing attributes!\n          if (!thisMsg.id) {\n            thisMsg.id = id;\n          }\n        }\n\n        if (!el.hasAttribute(aria.describedby)) {\n          el.setAttribute(aria.describedby, describedByIds.trim());\n        }\n      }\n    }\n\n    const formsAndGroups =\n      document.querySelectorAll('form.validate-on-blur, .form-group.validate-on-blur');\n    for (const el of formsAndGroups) {\n      el.addEventListener('blur', () => {\n        el.checkValidity();\n      });\n    }\n  }\n\n  rb.onDocumentReady(decorateInputs);\n  rb.forms = rb.forms || {};\n  rb.forms.decorateInputs = decorateInputs;\n})(window.rb, document);\n"],"sourceRoot":"../.."}