{"version":3,"sources":["components/progress/rocketbelt.progress-stepped.min.js"],"names":["rb","document","aria","onAttrMutation","mutations","mutationsLen","length","i","mutation","target","attributes","getNamedItem","current","span","createElement","textContent","setAttribute","querySelector","linksToDisable","linksLen","parentNode","querySelectorAll","j","link","disabled","linkToEnable","hiddenText","decorateProgressStepped","progressIndicators","progressIndicatorsLen","progressIndicator","label","hasAttribute","MutationObserver","subtree","attributeOldValue","attributeFilter","sibsLen","sibs","sib","window"],"mappings":"AAAA,cACA,SAAEA,EAAIC,GAAL,IAAAC,EAAKD,EAAAA,KAGJ,SAASE,EAAeC,GAGtB,IAHF,IAAAC,EAAAD,EAAAE,OAGWC,EAAI,EAAGA,EAAIF,EAAcE,IAAK,CAAvC,IAAKC,EAAWD,EAAIF,GAKlB,KAJiBD,EAAjBK,OAAAC,WAGkCC,aAAaT,EAAKU,SACpD,CAEE,IAAAC,EAAAZ,EAAAa,cAAA,QACAD,EAAMA,YAAOZ,iBACbY,EAAKE,aAAL,QAAmB,mBACnBF,EAAKG,OAAAA,aAAsBH,EAAAL,EAA3BC,OAAAQ,cAAA,MAcC,IAXD,IAAAC,EACAV,EAKMW,OAFDC,WAIAC,iBAPL,IAOoBF,EAAUG,QAP9B,SAOmCpB,EAAAU,QAPnC,YAQQW,EAAOL,EAAbZ,OAEDgB,EAAA,EAAAA,EAAAH,EAAAG,IAAA,CACIJ,EAAAI,GACPN,aAAAd,EAAAsB,UAAA,QAEEC,CADA,IAAMA,EAAejB,EAASC,OAAOQ,cAAc,KAInDQ,EAAIC,gBAAYxB,EAAAsB,UACdE,IAAAA,EAAWX,EAAcK,WAAzBH,cAAA,oBAEHS,IACFA,EAAAX,YAAA,iBAGH,SAASY,IAOL,IAHF,IAAKC,EAAeC,EAAAA,iBAA4B,qBACxCC,EAAoBF,EAA1BtB,OAEKwB,EAAAA,EAAAA,EAAAA,EAAoCC,IAApC,CACHD,IAAAA,EAAkBd,EAAyBT,GADxCuB,EAAkBE,aAAa9B,EAAK6B,QAIzCD,EAAkBd,aAAad,EAA/B6B,MAAA,sBAGAD,EAAiBd,aAAIiB,OAAiB,OAAiB9B,EAAeC,aAAf,WAAA,KACtC0B,IAAAA,iBAAmB,SAAA1B,GAAAD,EAAAC,KAClC8B,QADkCJ,EAAA,CAElCpB,SAAAA,EACAyB,YAAAA,EACAC,mBAAkBlC,EAJpBkC,gBAAA,CAAAlC,EAAAU,WAQA,IAAIA,EAAUkB,EAAAb,cAAA,IAAAf,EAAAU,QAAA,KACZA,IACAA,EAAQI,EAAkBJ,cAA1B,OACDI,aAAAd,EAAAU,QAAA,QAEDA,EAAQK,cAAc,KAAKD,aAAad,EAAKsB,SAAU,QAMrD,IAHF,IAAMa,EAAAA,EAANhB,iBAAMgB,IAANnC,EAAAU,QAAMyB,YAAAA,EAAUC,EAAKhC,OAGbiC,EAAMD,EAAAA,EAAZD,EAAAf,IAAA,CACIN,EAAad,GAClBc,aAAAd,EAAAsB,SAAA,UAKLxB,EAAG4B,gBAAAA,GACH5B,EAAG4B,mBAAmBD,EAAAA,oBAA0BA,GAtFlD3B,EAuFGwC,mBAvFHb,wBAAAA,EAAA,CAuFGa,OAAOxC,GAAIC","file":"rocketbelt.progress-stepped.min.js","sourcesContent":["'use strict';\n((rb, document) => {\n  const aria = rb.aria;\n\n  function onAttrMutation(mutations) {\n    const mutationsLen = mutations.length;\n\n    for (let i = 0; i < mutationsLen; i++) {\n      const mutation = mutations[i];\n      const attributes = mutation.target.attributes;\n\n      const hasAriaCurrent = attributes.getNamedItem(aria.current) ? true : false;\n      // If target's attributes include aria-current\n      if (hasAriaCurrent) {\n        // Add visually-hidden descriptor\n        const span = document.createElement('span');\n        span.textContent = 'Current Step: ';\n        span.setAttribute('class', 'visually-hidden');\n        mutation.target.insertBefore(span, mutation.target.querySelector('a'));\n\n        // Decorate current & subsequent links with aria-disabled\n        const linksToDisable =\n          mutation\n            .target\n            .parentNode\n            .querySelectorAll(`[${aria.current}] a, [${aria.current}] ~ li a`);\n        const linksLen = linksToDisable.length;\n\n        for (let j = 0; j < linksLen; j++) {\n          const link = linksToDisable[j];\n          link.setAttribute(aria.disabled, true);\n        }\n      } else {\n      // If target doesn't have aria-current, remove aria-disabled from child link\n        const linkToEnable = mutation.target.querySelector('a');\n        linkToEnable.removeAttribute(aria.disabled);\n        const hiddenText = linkToEnable.parentNode.querySelector('.visually-hidden');\n\n        if (hiddenText) {\n          hiddenText.textContent = 'Completed: ';\n        }\n      }\n    }\n  }\n\n  function decorateProgressStepped() {\n    const progressIndicators = document.querySelectorAll('.progress-stepped');\n    const progressIndicatorsLen = progressIndicators.length;\n\n    for (let i = 0; i < progressIndicatorsLen; i++) {\n      const progressIndicator = progressIndicators[i];\n\n      if (!progressIndicator.hasAttribute(aria.label)) {\n        progressIndicator.setAttribute(aria.label, 'Progress Indicator');\n      }\n\n      progressIndicator.setAttribute('role', 'nav');\n      progressIndicator.setAttribute('tabindex', '0');\n\n      const observer = new MutationObserver((mutations) => { onAttrMutation(mutations); });\n      observer.observe(progressIndicator, {\n        subtree: true,\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: [aria.current]\n      });\n\n      let current = progressIndicator.querySelector(`[${aria.current}]`);\n      if (!current) {\n        current = progressIndicator.querySelector('li');\n        current.setAttribute(aria.current, 'page');\n      }\n\n      current.querySelector('a').setAttribute(aria.disabled, 'true');\n\n      const sibs = progressIndicator.querySelectorAll(`[${aria.current}] ~ li a`);\n      const sibsLen = sibs.length;\n\n      for (let j = 0; j < sibsLen; j++) {\n        const sib = sibs[j];\n        sib.setAttribute(aria.disabled, 'true');\n      }\n    }\n  }\n\n  rb.onDocumentReady(decorateProgressStepped);\n  rb.progressIndicators = rb.progressIndicators || {};\n  rb.progressIndicators.decorateProgressStepped = decorateProgressStepped;\n})(window.rb, document);\n"],"sourceRoot":"../.."}