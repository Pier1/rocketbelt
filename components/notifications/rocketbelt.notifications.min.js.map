{"version":3,"sources":["components/notifications/rocketbelt.notifications.min.js"],"names":["$","defaultConfig","actionText","additionalClasses","dismissable","icon","iconColor","position","text","timeout","config","notify","notificationText","template","length","join","setTimeout","getActionTemplate","overrideDefault","append","value","remove","reConfig","newConfig","arguments","undefined","Object","keys","forEach","key","rbNotify","params"],"mappings":"AAAAA,EAAE,WACA,IAAMC,EAAgB,CACpBC,WAAY,GACZC,kBAAmB,GACnBC,aAAa,EACbC,KAAM,GACNC,UAAW,GACXC,SAAU,YACVC,KAAM,wBACNC,QAAS,KAEPC,EAAS,GAEb,SAASC,EAAOC,GACd,IAAIC,EAAWb,EAAAA,uEACiDU,EAAOH,SADxDP,MACsEY,GAAoBF,EAAOP,kBAAkBW,OAASJ,EAAOP,kBAAkBY,KAAK,KAAO,IADjKf,8DAkBfgB,EAAWX,KAqCV,8FArB8CK,EAAOJ,UAqBrD,+EAG2BI,EAAAL,KAH3B,2CArCgB,IAlBFL,yGAqBhBY,GAAAF,EAAAF,MArBgBR,uCAuBRiB,GAAoBP,EAAAR,WAwBzBgB,qCAEFP,EAAAA,WAFEO,qBAxByB,IAvBZlB,0IA0CfU,EAAAA,QAAAS,OAAcC,GACfJ,WAAA,WAxBGhB,EAAEa,GAAUQ,UA0BhBX,EAASY,SAAT,SAASA,EAAT,GAAkC,IAAhBC,EAAgB,EAAAC,UAAAV,aAAAW,IAAlC,EAAA,EAA8B,GAC5BC,OAAOC,KAAKJ,GAAWK,QAAQ,SAAAC,IA5DnC,SAAAA,EAAAT,GAwDIV,EAAOmB,GAAOT,EAKZF,CAAgBW,EAAKN,EAAUM,MAEjClB,IASFX,EAAE8B,SAAW,SAASC,GALpBL,OAAOC,KAAK1B,GAAe2B,QAAQ,SAAAC,GACjCnB,EAAOmB,GAAO5B,EAAc4B,KAMR,iBAAXE,EAAqBpB,EAAOoB,GAChCT,EAASS","file":"rocketbelt.notifications.min.js","sourcesContent":["$(function () {\n  const defaultConfig = {\n    actionText: '',\n    additionalClasses: [],\n    dismissable: true,\n    icon: '',\n    iconColor: '',\n    position: 'top-right',\n    text: 'Description Text Here',\n    timeout: 5000\n  };\n  let config = {};\n\n  function notify(notificationText) {\n    let template = $(`\n      <div role=\"alert\" aria-live=\"polite\" class=\"rb-notification ${config.position} ${ !notificationText && config.additionalClasses.length ? config.additionalClasses.join(' ') : '' }\">\n        <div class=\"rb-notification-wrap\">\n          ${ config.icon ? getIconTemplate() : ''}\n          <div class=\"rb-notification-text\">\n            <div class=\"description\">\n              ${notificationText || config.text}\n            </div>\n            ${ !notificationText && config.actionText ? getActionTemplate() : ''}\n          </div>\n          <div class=\"rb-notification-close\">\n            X\n          </div>\n        </div>\n      </div>\n    `);\n\n    $('body').append(template);\n    setTimeout(() => {\n      $(template).remove();\n    }, config.timeout)\n  }\n\n  function getActionTemplate() {\n    return `\n    <div class=\"action\">\n      ${config.actionText}\n    </div>\n    `\n  }\n\n  function getIconTemplate() {\n    return `\n    <div class=\"rb-notification-icon\">\n      <svg class=\"icon\" role=\"img\" style=\"color: ${config.iconColor}\">\n        <use xlink:href=\"/components/icons/rocketbelt.icons.svg#rb-icon-${config.icon}\"></use>\n      </svg>\n    </div>\n    `\n  }\n\n  function overrideDefault(key, value) {\n    config[key] = value;\n  }\n\n  function reConfig(newConfig = {}) {\n    Object.keys(newConfig).forEach(key => {\n      overrideDefault(key, newConfig[key])\n    });\n    notify();\n  }\n\n  function resetConfig() {\n    Object.keys(defaultConfig).forEach(key => {\n      config[key] = defaultConfig[key]\n    });\n  }\n\n  $.rbNotify = function(params) {\n    resetConfig();\n    if (typeof params === 'string') notify(params)\n    else { reConfig(params) }\n  }\n});\n"],"sourceRoot":"../.."}