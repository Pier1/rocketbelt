{"version":3,"sources":["components/busy-indicators/rocketbelt.progress-indicators.min.js"],"names":["rb","document","mutations","mutationsLen","onClassMutation","length","k","mutation","setIndicators","oldValue","el","classList","getElementsByClassName","observeComponents","overlay","querySelectorAll","busyable","parentNode","contains","removeChild","markup","segment","message","dataset","rbIsBusyMessage","repeat","delay","rbIsBusyMessageAfterSeconds","loader","setTimeout","add","a11yAttrs","elType","requestAnimationFrame","nodeName","insertAdjacentHTML","fragment","busyableEl","MutationObserver","observer","busyableLen","i","onDocumentReady","subtree","attributes","attributeOldValue","attributeFilter","window","forEach","progressIndicators"],"mappings":"AAAA,cACA,SAAEA,EAAIC,GAAL,SAACD,EAAiBE,GAIf,IAHF,IAAAC,EAASC,GAA2BF,EAAAG,OAAAH,EAAAG,OAAA,EAGzBC,EAAI,EAAGA,EAAIH,EAAcG,IAAK,CAAvC,IAAKC,EAAWD,EAAIH,GAKlBK,EAJMD,EAAWL,OACNK,EAAXE,WAOJ,SAASD,EAAcE,EAAID,GAA3B,GAAAA,GAASD,EAAkBC,MAA3B,yBACMC,IAIFA,EAAAC,YACAD,EAAIA,UAAGE,SAAAA,WAgEFC,CARL,IAAMC,EAAUJ,EAAGK,iBAAiB,oBAAoB,GAYxDC,GAAWf,EAASc,aAAiBD,EAArCG,WAAAN,UAAAO,SAAA,YACDJ,EAAAG,WAAAE,YAAAL,QAnEG,GAAA,IAAAJ,EAAIU,uBAAJ,mBAAAf,OAAA,CAEA,IAAIK,EAAGC,GAEL,GAAAD,EAAMW,UAAAA,SAAAA,oBAAA,CADN,IAGMC,EAAAA,0CAAAA,EAAUZ,EAAGa,QAAQC,gBAS3BJ,EAAAA,4BANAA,EAAAA,6BAAAE,EAAAF,IAAA,IAMA,oFAEaC,EAAAI,OAAA,GAFb,yDAAA,IAAIC,EAAQhB,EAAGa,QAAQI,4BAQnBL,IAEEM,EADFF,GACEE,EAGLC,WAAA,WA1BH,IA2BWnB,EAAGC,EAAUO,cAAS,gBAC/BE,GAASQ,EAAAjB,WACJiB,EAAAjB,UAAAmB,IAAA,0BAEN,IAAAJ,SAIDN,EAFMW,EAAAA,UACJb,SAAA,mBACIc,8CALK,6CAA6CP,OAAO,GAa/DQ,IAEMnB,EAAoBH,OAApBG,EAAYA,UAAmB,OAAAJ,EAAAwB,SAAA,KAAA,MACjCpB,EAAAA,IACDkB,EADClB,kHAHJM,EAGIN,eAGLkB,EAHKlB,IAKNJ,EAAAyB,mBAAA,YAAAC,GAREH,sBAAsB,WAWpBnB,IAAAA,EAAWA,EAAQG,cAAc,oBACnCH,GAAAA,EAAmBK,WACpBL,EAAAH,UAAAmB,IAAA,6BAcD,SAAMO,IATR,IAAIrB,EAAWf,EAASc,iBAAiB,gBAYlBuB,IAArBtB,EAAMuB,SAAiDnC,EAAAA,EAAgBF,iBAAhB,SAJzD,IASC,IAAAsC,EAAAxB,EAAAX,OATQoC,EAAI,EAAGA,EAAID,EAAaC,IAAK,CAYrCC,IAAAA,EAAgB1B,EAAMyB,GAGX,IAAC/B,iBAAO,SAAAR,GAAAE,EAAAF,KAClBM,QADF6B,EAHF,CAAAM,SAAA,EAAAC,YAAA,EAAAC,mBAAA,EAAAC,gBAAA,CAAA,YAxGF9C,EAmHG+C,gBAAW9C,WATEA,EAASc,iBAAiB,YAClCiC,QAAQ,SAACtC,GACXF,EAAcE,OAGlBV,EAAG0C,gBAAgB7B,GACnBb,EAAGiD,mBAAqBjD,EAAGiD,oBAAsB,GACjDjD,EAAGiD,mBAAmBzC,cAAgBA,EACtCR,EAAGiD,mBAAmBpC,kBAAoBA,EAlH5C,CAmHGkC,OAAO/C,GAAIC","file":"rocketbelt.progress-indicators.min.js","sourcesContent":["'use strict';\n((rb, document) => {\n  function onClassMutation(mutations) {\n    const mutationsLen = mutations && mutations.length ? mutations.length : 0;\n\n    for (let k = 0; k < mutationsLen; k++) {\n      const mutation = mutations[k];\n      const el = mutation.target;\n      const oldValue = mutation.oldValue;\n\n      setIndicators(el, oldValue);\n    }\n  }\n\n  function setIndicators(el, oldValue) {\n    if ((!oldValue || !oldValue.match(/[\\s\\b]is-busy[\\s\\b]/)) &&\n        el &&\n        el.classList &&\n        el.classList.contains('is-busy')) {\n      // If \"is-busy\" was added, do the decoratin'\n      if (el.getElementsByClassName('is-busy_overlay').length === 0) {\n        // Only add overlay if one doesn't already exist\n        let markup = '';\n\n        if (el.classList.contains('is-busyable-page')) {\n          const segmentClass = 'flip-loader_segment';\n          const segment = `<div class=\"${segmentClass}\"></div>`;\n\n          const message = el.dataset.rbIsBusyMessage;\n          const messageAttr = message ? ` data-rb-is-busy-message=\"${message}\"` : '';\n\n          markup = `<div class=\"flip-loader\"${messageAttr}>\\\n                      <div class=\"flip-loader_segments\">\\\n                        ${segment.repeat(5)}\\\n                      </div>\\\n                    </div>`;\n\n          let delay = el.dataset.rbIsBusyMessageAfterSeconds;\n\n          if (message) {\n            if (!delay) {\n              delay = 0;\n            }\n\n            setTimeout(() => {\n              const loader = el.querySelector('.flip-loader');\n              if (loader && loader.classList) {\n                loader.classList.add('is-busy_message-shown');\n              }\n            }, delay * 1000);\n          }\n        } else if (el.classList.contains('is-busy-spinner')) {\n          markup = '<div class=\"spin\" aria-hidden=\"true\"></div>';\n        } else {\n          markup = '<div class=\"dot\" aria-hidden=\"true\"></div>'.repeat(3);\n        }\n\n        const a11yAttrs =\n          'aria-label=\"Loading.\" role=\"alert\" aria-live=\"assertive\" aria-busy=\"true\"';\n        const elType = el.nodeName === 'UL' || el.nodeName === 'OL' ? 'li' : 'div';\n        const fragment =\n          `<${elType} class=\"is-busy_overlay\" ${a11yAttrs}>\\\n            ${markup}\\\n          </${elType}>`;\n\n        el.insertAdjacentHTML('beforeend', fragment);\n\n        requestAnimationFrame(() => {\n          const overlay = el.querySelector('.is-busy_overlay');\n          if (overlay  && overlay.classList) {\n            overlay.classList.add('is-busy_overlay-opaque');\n          }\n        });\n      }\n    } else {\n      // If \"is-busy\" was removed\n      const overlay = el.querySelectorAll('.is-busy_overlay')[0];\n\n      if (overlay && overlay.parentNode && !overlay.parentNode.classList.contains('is-busy')) {\n        overlay.parentNode.removeChild(overlay);\n      }\n    }\n  }\n\n  function observeComponents() {\n    let busyable = document.querySelectorAll('.is-busyable');\n\n    if (busyable.length === 0) {\n      busyable = document.querySelectorAll('body');\n    }\n\n    const busyableLen = busyable.length;\n\n    for (let i = 0; i < busyableLen; i++) {\n      const busyableEl = busyable[i];\n\n      // Set an observer to listen for .invalid.\n      const observer = new MutationObserver((mutations) => { onClassMutation(mutations); });\n      observer.observe(\n        busyableEl,\n        { subtree: true, attributes: true, attributeOldValue: true, attributeFilter: ['class'] }\n      );\n    }\n  }\n\n  rb.onDocumentReady(() => {\n    // Set busy indicators for any elements that have `.is-busy` on page load.\n    const els = document.querySelectorAll('.is-busy');\n    els.forEach((el) => {\n      setIndicators(el);\n    });\n  });\n  rb.onDocumentReady(observeComponents);\n  rb.progressIndicators = rb.progressIndicators || {};\n  rb.progressIndicators.setIndicators = setIndicators;\n  rb.progressIndicators.observeComponents = observeComponents;\n})(window.rb, document);\n"],"sourceRoot":"../.."}