{"version":3,"sources":["components/busy-indicators/rocketbelt.progress-indicators.min.js"],"names":["rb","document","mutations","mutationsLen","onClassMutation","length","k","mutation","setIndicators","oldValue","el","classList","contains","busyable","querySelectorAll","parentNode","getElementsByClassName","markup","segmentClass","segment","messageAttr","message","repeat","delay","dataset","rbIsBusyMessageAfterSeconds","setTimeout","querySelector","add","fragment","elType","nodeName","overlay","insertAdjacentHTML","observeComponents","busyableEl","observer","MutationObserver","i","busyableLen","observe","subtree","attributes","attributeOldValue","attributeFilter","progressIndicators","forEach","onDocumentReady","window"],"mappings":"AAAA,cACA,SAAEA,EAAIC,GAAL,SAACD,EAAiBE,GAIf,IAAK,IAHPC,EAASC,GAA2BF,EAAAG,OAAAH,EAAAG,OAAA,EAGzBC,EAAI,EAAGA,EAAIH,EAAcG,IAAK,CAAvC,IAAKC,EAAWD,EAAIH,GAKlBK,EAJMD,EAAWL,OACNK,EAAXE,WAOJ,SAASD,EAAcE,EAAID,GAA3B,GAAAA,GAASD,EAAkBC,MAA3B,iBACMC,EAAED,YAGJC,EAAAC,UAAAC,SAAA,WA2CK,CAWP,IAAIC,EAAWZ,EAAAA,iBAASa,oBAAxB,GAEID,IAASR,EAAbU,WAA2BJ,UAAAC,SAAA,YACzBC,EAAAA,WAAoBC,YAAAA,QAvDlB,GAAA,IAAAJ,EAAAM,uBAAA,mBAAAX,OAAA,CACA,IAAIY,EAAS,GAGX,GAAAP,EAAMQ,UAAAA,SAAe,oBAArB,CACA,IAAMC,EAAAA,0CAGAC,EAAAA,EAAcC,QAAAA,gBAEpBJ,EAAAA,4BAFoBI,EAAAA,6BAAuCA,EAAvC,IAAoD,IAExE,oFAEgBF,EAAQG,OAAO,GAF/B,yDAWG,IAAAC,EAAAb,EAAAc,QAAAC,4BAEDC,IACKC,IADLJ,EAEGA,GAGLN,WAAS,WACVP,EAAAiB,cAAA,gBAAAhB,UAAAiB,IAAA,0BAJc,IAARL,SASPN,EAAMY,6CAAAP,OAAA,GAMP,IAEDQ,EAAA,OAAApB,EAAAqB,UAAA,OAAArB,EAAAqB,SAAA,KAAA,MACMC,EAAAA,IAREF,EAQFE,yIAEFA,EAFEA,eAGJA,EAHIA,IAKPtB,EAAAuB,mBAAA,YAAAJ,IAYD,SAAKK,IACH,IAAArB,EAAMsB,EAAatB,iBAAnB,gBAEA,IAAAA,EAAAR,SACAQ,EAAMuB,EAAeC,iBAAiB,SAMzC,IAAA,IALGD,EACED,EADF9B,OAKHiC,EAAA,EAAAA,EAAAC,EAAAD,IAAA,CATG,IAAMH,EAAatB,EAASyB,GAaTxB,IAAAA,iBAAiB,SAAAZ,GAAtCE,EAAAF,KACAsC,QACEhC,GADFiC,SAAA,EAAAC,YAAA,EAAAC,mBAAA,EAAAC,iBAAA,YAOF5C,EAAG6C,gBAAAA,WARW5C,EAASa,iBAAiB,YAClCgC,QAAQ,SAACpC,GACXF,EAAcE,OAGlBV,EAAG+C,gBAAgBb,GACnBlC,EAAG6C,mBAAqB7C,EAAG6C,uBAC3B7C,EAAG6C,mBAAmBrC,cAAgBA,EACtCR,EAAG6C,mBAAmBX,kBAAoBA,EArG5C,CAsGGc,OAAOhD,GAAIC","file":"rocketbelt.progress-indicators.min.js","sourcesContent":["'use strict';\n((rb, document) => {\n  function onClassMutation(mutations) {\n    const mutationsLen = mutations && mutations.length ? mutations.length : 0;\n\n    for (let k = 0; k < mutationsLen; k++) {\n      const mutation = mutations[k];\n      const el = mutation.target;\n      const oldValue = mutation.oldValue;\n\n      setIndicators(el, oldValue);\n    }\n  }\n\n  function setIndicators(el, oldValue) {\n    if ((!oldValue || !oldValue.match(/\\bis-busy\\b/)) &&\n        el.classList &&\n        el.classList.contains('is-busy')) {\n      // If \"is-busy\" was added, do the decoratin'\n      if (el.getElementsByClassName('is-busy_overlay').length === 0) {\n        // Only add overlay if one doesn't already exist\n        let markup = '';\n\n        if (el.classList.contains('is-busyable-page')) {\n          const segmentClass = 'flip-loader_segment';\n          const segment = `<div class=\"${segmentClass}\"></div>`;\n\n          const message = el.dataset.rbIsBusyMessage;\n          const messageAttr = message ? ` data-rb-is-busy-message=\"${message}\"` : '';\n\n          markup = `<div class=\"flip-loader\"${messageAttr}>\\\n                      <div class=\"flip-loader_segments\">\\\n                        ${segment.repeat(5)}\\\n                      </div>\\\n                    </div>`;\n\n          let delay = el.dataset.rbIsBusyMessageAfterSeconds;\n\n          if (message) {\n            if (!delay) {\n              delay = 0;\n            }\n\n            setTimeout(() => {\n              el.querySelector('.flip-loader').classList.add('is-busy_message-shown');\n            }, delay * 1000);\n          }\n        } else {\n          markup = '<div class=\"dot\" aria-hidden=\"true\"></div>'.repeat(3);\n        }\n\n        const a11yAttrs =\n          'aria-label=\"Loading.\" role=\"alert\" aria-live=\"assertive\" aria-busy=\"true\"';\n        const elType = el.nodeName === 'UL' || el.nodeName === 'OL' ? 'li' : 'div';\n        const fragment =\n          `<${elType} class=\"is-busy_overlay is-busy_overlay-opaque\" ${a11yAttrs}>\\\n            ${markup}\\\n          </${elType}>`;\n\n        el.insertAdjacentHTML('beforeend', fragment);\n      }\n    } else {\n      // If \"is-busy\" was removed\n      const overlay = el.querySelectorAll('.is-busy_overlay')[0];\n\n      if (overlay && !overlay.parentNode.classList.contains('is-busy')) {\n        overlay.parentNode.removeChild(overlay);\n      }\n    }\n  }\n\n  function observeComponents() {\n    let busyable = document.querySelectorAll('.is-busyable');\n\n    if (busyable.length === 0) {\n      busyable = document.querySelectorAll('body');\n    }\n\n    const busyableLen = busyable.length;\n\n    for (let i = 0; i < busyableLen; i++) {\n      const busyableEl = busyable[i];\n\n      // Set an observer to listen for .invalid.\n      const observer = new MutationObserver((mutations) => { onClassMutation(mutations); });\n      observer.observe(\n        busyableEl,\n        { subtree: true, attributes: true, attributeOldValue: true, attributeFilter: ['class'] }\n      );\n    }\n  }\n\n  rb.onDocumentReady(() => {\n    // Set busy indicators for any elements that have `.is-busy` on page load.\n    const els = document.querySelectorAll('.is-busy');\n    els.forEach((el) => {\n      setIndicators(el);\n    });\n  });\n  rb.onDocumentReady(observeComponents);\n  rb.progressIndicators = rb.progressIndicators || {};\n  rb.progressIndicators.setIndicators = setIndicators;\n  rb.progressIndicators.observeComponents = observeComponents;\n})(window.rb, document);\n"],"sourceRoot":"../.."}