{"version":3,"sources":["components/busy-indicators/rocketbelt.progress-indicators.min.js"],"names":["rb","document","mutations","mutationsLen","onClassMutation","length","k","mutation","setIndicators","oldValue","el","classList","contains","overlay","parentNode","removeChild","getElementsByClassName","markup","elType","nodeName","fragment","insertAdjacentHTML","busyable","querySelectorAll","busyableLen","busyableEl","i","observer","MutationObserver","subtree","attributes","attributeOldValue","observe","attributeFilter","onDocumentReady","progressIndicators","observeComponents","window"],"mappings":"AAAA,cACA,SAAEA,EAAIC,GAAL,SAACD,EAAiBE,GAIf,IAAK,IAHPC,EAASC,GAA2BF,EAAAG,OAAAH,EAAAG,OAAA,EAGzBC,EAAI,EAAGA,EAAIH,EAAcG,IAAK,CAAvC,IAAKC,EAAWD,EAAIH,GAKlBK,EAJMD,EAAWL,OACNK,EAAXE,WAOJ,SAASD,EAAcE,EAAID,GAA3B,GAAAA,GAASD,EAAkBC,MAA3B,iBAAqCC,EAAAC,YAAAD,EAAAC,UAAAC,SAAA,WAuB5B,CAKHC,IAAAA,EAAQC,EAAAA,iBAAuBD,oBAA/B,GAEHA,IAAAA,EAAAC,WAAAH,UAAAC,SAAA,YACFC,EAAAC,WAAAC,YAAAF,QA7BG,GAAA,IAAAH,EAAAM,uBAAA,mBAAAX,OAAA,CAEE,IAAAY,EAAA,GAGAA,EAAIP,EAAGC,UAAUC,SAAS,oBAAnBD,yIAEA,iIAIP,IAEMO,EAAyB,OAAhBR,EAAGS,UAAqC,OAAhBT,EAAGS,SAAoB,KAAO,MAC/DC,EAAAA,IACAF,EADAE,yIAKHC,EALGD,eAMPF,EANOE,IAQRV,EAAAW,mBAAA,YAAAD,IAYF,SAAIE,IACFA,IAAAA,EAAWrB,EAASsB,iBAAiB,gBADf,IAApBD,EAASjB,SAIbiB,EAAME,EAAcF,iBAApB,SAKE,IAAA,IAFMG,EAAaH,EAAAjB,OAEnBqB,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CACA,IAAMC,EAAeC,EAAAA,GACJH,IAAAA,iBAAcI,SAAAA,GAAeC,EAAkBC,KACjEC,QAAAP,GAAAI,SAAA,EAAAC,YAAA,EAAAC,mBAAA,EAAAE,iBAAA,YAIDjC,EAAAkC,gBAAA,WAEYjC,EAAAsB,iBAAQ,YAClBf,QAAAA,SAAAA,GADFA,EAAAE,OAKFV,EAAGmC,gBAAAA,GACHnC,EAAGmC,mBAAmB3B,EAAAA,uBACtBR,EAAGmC,mBAAmBC,cAAAA,EA1ExBpC,EA2EGqC,mBA3EHD,kBAAAA,EAAA,CA2EGC,OAAOrC,GAAIC","file":"rocketbelt.progress-indicators.min.js","sourcesContent":["'use strict';\n((rb, document) => {\n  function onClassMutation(mutations) {\n    const mutationsLen = mutations && mutations.length ? mutations.length : 0;\n\n    for (let k = 0; k < mutationsLen; k++) {\n      const mutation = mutations[k];\n      const el = mutation.target;\n      const oldValue = mutation.oldValue;\n\n      setIndicators(el, oldValue);\n    }\n  }\n\n  function setIndicators(el, oldValue) {\n    if ((!oldValue || !oldValue.match(/\\bis-busy\\b/)) && el.classList && el.classList.contains('is-busy')) {\n      // If \"is-busy\" was added, do the decoratin'\n      if (el.getElementsByClassName('is-busy_overlay').length === 0) {\n        // Only add overlay if one doesn't already exist\n        let markup = '';\n\n        if (el.classList.contains('is-busyable-page')) {\n          markup = '<div class=\"box-loader\"><div class=\"border\"></div><div class=\"border\"></div><div class=\"border\"></div><div class=\"border\"></div></div>';\n        } else {\n          markup = '<div class=\"dot\" aria-hidden=\"true\"></div><div class=\"dot\" aria-hidden=\"true\"></div><div class=\"dot\" aria-hidden=\"true\"></div>';\n        }\n\n        const a11yAttrs =\n          'aria-label=\"Loading.\" role=\"alert\" aria-live=\"assertive\" aria-busy=\"true\"';\n        const elType = el.nodeName === 'UL' || el.nodeName === 'OL' ? 'li' : 'div';\n        const fragment =\n          `<${elType} class=\"is-busy_overlay is-busy_overlay-opaque\" ${a11yAttrs}>\\\n            ${markup}\\\n          </${elType}>`;\n\n        el.insertAdjacentHTML('beforeend', fragment);\n      }\n    } else {\n      // If \"is-busy\" was removed\n      const overlay = el.querySelectorAll('.is-busy_overlay')[0];\n\n      if (overlay && !overlay.parentNode.classList.contains('is-busy')) {\n        overlay.parentNode.removeChild(overlay);\n      }\n    }\n  }\n\n  function observeComponents() {\n    let busyable = document.querySelectorAll('.is-busyable');\n\n    if (busyable.length === 0) {\n      busyable = document.querySelectorAll('body');\n    }\n\n    const busyableLen = busyable.length;\n\n    for (let i = 0; i < busyableLen; i++) {\n      const busyableEl = busyable[i];\n\n      // Set an observer to listen for .invalid.\n      const observer = new MutationObserver((mutations) => { onClassMutation(mutations); });\n      observer.observe(busyableEl, { subtree: true, attributes: true, attributeOldValue: true, attributeFilter: ['class'] });\n    }\n  }\n\n  rb.onDocumentReady(() => {\n    // Set busy indicators for any elements that have `.is-busy` on page load.\n    const els = document.querySelectorAll('.is-busy');\n    els.forEach((el) => {\n      setIndicators(el);\n    });\n  });\n  rb.onDocumentReady(observeComponents);\n  rb.progressIndicators = rb.progressIndicators || {};\n  rb.progressIndicators.setIndicators = setIndicators;\n  rb.progressIndicators.observeComponents = observeComponents;\n})(window.rb, document);\n"],"sourceRoot":"../.."}