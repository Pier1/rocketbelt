{"version":3,"sources":["components/icons/rocketbelt.icons.svgxuse.min.js"],"names":["window","addEventListener","checkUseElems","tid","cache","Object","create","debouncedCheck","clearTimeout","setTimeout","unobserveChanges","observeChanges","observer","MutationObserver","observe","document","documentElement","childList","subtree","attributes","disconnect","removeEventListener","ignore","xlinkNS","observeIfDone","inProgressCount","attrUpdateFunc","spec","base","isXlink","useEl","setAttributeNS","hash","setAttribute","onErrorTimeout","xhr","onerror","ontimeout","bcr","href","i","isHidden","url","uses","getElementsByTagName","length","getBoundingClientRect","getAttribute","getAttributeNS","split","left","right","top","bottom","width","height","undefined","XMLHttpRequest","onload","svg","body","x","createElement","innerHTML","responseText","style","position","overflow","insertBefore","firstChild","open","send","abort","winLoad"],"mappings":"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","file":"rocketbelt.icons.svgxuse.min.js","sourcesContent":["/*!\n * @copyright Copyright (c) 2017 IcoMoon.io\n * @license   Licensed under MIT license\n *            See https://github.com/Keyamoon/svgxuse\n * @version   1.2.1\n */\n/*jslint browser: true */\n/*global XDomainRequest, MutationObserver, window */\n(function () {\n    \"use strict\";\n    if (window && window.addEventListener) {\n        var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n        var checkUseElems;\n        var tid; // timeout id\n        var debouncedCheck = function () {\n            clearTimeout(tid);\n            tid = setTimeout(checkUseElems, 100);\n        };\n        var unobserveChanges = function () {\n            return;\n        };\n        var observeChanges = function () {\n            var observer;\n            window.addEventListener(\"resize\", debouncedCheck, false);\n            window.addEventListener(\"orientationchange\", debouncedCheck, false);\n            if (window.MutationObserver) {\n                observer = new MutationObserver(debouncedCheck);\n                observer.observe(document.documentElement, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true\n                });\n                unobserveChanges = function () {\n                    try {\n                        observer.disconnect();\n                        window.removeEventListener(\"resize\", debouncedCheck, false);\n                        window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n                    } catch (ignore) {}\n                };\n            } else {\n                document.documentElement.addEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n                unobserveChanges = function () {\n                    document.documentElement.removeEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n                    window.removeEventListener(\"resize\", debouncedCheck, false);\n                    window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n                };\n            }\n        };\n        var xlinkNS = \"http://www.w3.org/1999/xlink\";\n        checkUseElems = function () {\n            var base;\n            var bcr;\n            var fallback = \"\"; // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n            var hash;\n            var href;\n            var i;\n            var inProgressCount = 0;\n            var isHidden;\n            var isXlink = false;\n            var Request;\n            var url;\n            var uses;\n            var xhr;\n            function observeIfDone() {\n                // If done with making changes, start watching for chagnes in DOM again\n                inProgressCount -= 1;\n                if (inProgressCount === 0) { // if all xhrs were resolved\n                    unobserveChanges(); // make sure to remove old handlers\n                    observeChanges(); // watch for changes to DOM\n                }\n            }\n            function attrUpdateFunc(spec) {\n                return function () {\n                    if (cache[spec.base] !== true) {\n                        if (spec.isXlink) {\n                            spec.useEl.setAttributeNS(xlinkNS, \"xlink:href\", \"#\" + spec.hash);\n                        } else {\n                            spec.useEl.setAttribute(\"href\", \"#\" + spec.hash);\n                        }\n                    }\n                };\n            }\n            function onloadFunc(xhr) {\n                return function () {\n                    var body = document.body;\n                    var x = document.createElement(\"x\");\n                    var svg;\n                    xhr.onload = null;\n                    x.innerHTML = xhr.responseText;\n                    svg = x.getElementsByTagName(\"svg\")[0];\n                    if (svg) {\n                        svg.setAttribute(\"aria-hidden\", \"true\");\n                        svg.style.position = \"absolute\";\n                        svg.style.width = 0;\n                        svg.style.height = 0;\n                        svg.style.overflow = \"hidden\";\n                        body.insertBefore(svg, body.firstChild);\n                    }\n                    observeIfDone();\n                };\n            }\n            function onErrorTimeout(xhr) {\n                return function () {\n                    xhr.onerror = null;\n                    xhr.ontimeout = null;\n                    observeIfDone();\n                };\n            }\n            unobserveChanges(); // stop watching for changes to DOM\n            // find all use elements\n            uses = document.getElementsByTagName(\"use\");\n            for (i = 0; i < uses.length; i += 1) {\n                try {\n                    bcr = uses[i].getBoundingClientRect();\n                } catch (ignore) {\n                    // failed to get bounding rectangle of the use element\n                    bcr = false;\n                }\n                href = uses[i].getAttribute(\"href\");\n                if (!href) {\n                    href = uses[i].getAttributeNS(xlinkNS, \"href\");\n                    isXlink = true;\n                } else {\n                    isXlink = false;\n                }\n                if (href && href.split) {\n                    url = href.split(\"#\");\n                } else {\n                    url = [\"\", \"\"];\n                }\n                base = url[0];\n                hash = url[1];\n                isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;\n                if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n                    // the use element is empty\n                    // if there is a reference to an external SVG, try to fetch it\n                    // use the optional fallback URL if there is no reference to an external SVG\n                    if (fallback && !base.length && hash && !document.getElementById(hash)) {\n                        base = fallback;\n                    }\n                    if (base.length) {\n                        // schedule updating xlink:href\n                        xhr = cache[base];\n                        if (xhr !== true) {\n                            // true signifies that prepending the SVG was not required\n                            setTimeout(attrUpdateFunc({\n                                useEl: uses[i],\n                                base: base,\n                                hash: hash,\n                                isXlink: isXlink\n                            }), 0);\n                        }\n                        if (xhr === undefined) {\n                                xhr = new XMLHttpRequest();\n                                cache[base] = xhr;\n                                xhr.onload = onloadFunc(xhr);\n                                xhr.onerror = onErrorTimeout(xhr);\n                                xhr.ontimeout = onErrorTimeout(xhr);\n                                xhr.open(\"GET\", base);\n                                xhr.send();\n                                inProgressCount += 1;\n                        }\n                    }\n                } else {\n                    if (!isHidden) {\n                        if (cache[base] === undefined) {\n                            // remember this URL if the use element was not empty and no request was sent\n                            cache[base] = true;\n                        } else if (cache[base].onload) {\n                            // if it turns out that prepending the SVG is not necessary,\n                            // abort the in-progress xhr.\n                            cache[base].abort();\n                            delete cache[base].onload;\n                            cache[base] = true;\n                        }\n                    } else if (base.length && cache[base]) {\n                        attrUpdateFunc({\n                            useEl: uses[i],\n                            base: base,\n                            hash: hash\n                        })();\n                    }\n                }\n            }\n            uses = \"\";\n            inProgressCount += 1;\n            observeIfDone();\n        };\n        // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n        window.addEventListener(\"load\", function winLoad() {\n            window.removeEventListener(\"load\", winLoad, false); // to prevent memory leaks\n            tid = setTimeout(checkUseElems, 0);\n        }, false);\n    }\n}());\n"],"sourceRoot":"../.."}