{"version":3,"sources":["components/icons/rocketbelt.icons.svgxuse.min.js"],"names":["window","addEventListener","cache","checkUseElems","tid","debouncedCheck","clearTimeout","unobserveChanges","xlinkNS","base","fallback","hash","href","inProgressCount","Request","url","uses","i","isHidden","observeIfDone","observeChanges","observer","MutationObserver","observe","childList","subtree","disconnect","removeEventListener","document","documentElement","attrUpdateFunc","spec","isXlink","setAttributeNS","useEl","onloadFunc","xhr","body","x","createElement","innerHTML","responseText","onload","svg","getElementsByTagName","style","position","setAttribute","width","firstChild","onErrorTimeout","ontimeout","length","ignore","bcr","getAttribute","split","left","right","top","bottom","height","setTimeout","undefined","XMLHttpRequest","onerror","open","abort","winLoad"],"mappings":"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","file":"rocketbelt.icons.svgxuse.min.js","sourcesContent":["/*!\n * @copyright Copyright (c) 2017 IcoMoon.io\n * @license   Licensed under MIT license\n *            See https://github.com/Keyamoon/svgxuse\n * @version   1.2.1\n */\n/*jslint browser: true */\n/*global XDomainRequest, MutationObserver, window */\n(function () {\n    \"use strict\";\n    if (window && window.addEventListener) {\n        var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n        var checkUseElems;\n        var tid; // timeout id\n        var debouncedCheck = function () {\n            clearTimeout(tid);\n            tid = setTimeout(checkUseElems, 100);\n        };\n        var unobserveChanges = function () {\n            return;\n        };\n        var observeChanges = function () {\n            var observer;\n            window.addEventListener(\"resize\", debouncedCheck, false);\n            window.addEventListener(\"orientationchange\", debouncedCheck, false);\n            if (window.MutationObserver) {\n                observer = new MutationObserver(debouncedCheck);\n                observer.observe(document.documentElement, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true\n                });\n                unobserveChanges = function () {\n                    try {\n                        observer.disconnect();\n                        window.removeEventListener(\"resize\", debouncedCheck, false);\n                        window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n                    } catch (ignore) {}\n                };\n            } else {\n                document.documentElement.addEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n                unobserveChanges = function () {\n                    document.documentElement.removeEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n                    window.removeEventListener(\"resize\", debouncedCheck, false);\n                    window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n                };\n            }\n        };\n        var xlinkNS = \"http://www.w3.org/1999/xlink\";\n        checkUseElems = function () {\n            var base;\n            var bcr;\n            var fallback = \"\"; // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n            var hash;\n            var href;\n            var i;\n            var inProgressCount = 0;\n            var isHidden;\n            var isXlink = false;\n            var Request;\n            var url;\n            var uses;\n            var xhr;\n            function observeIfDone() {\n                // If done with making changes, start watching for chagnes in DOM again\n                inProgressCount -= 1;\n                if (inProgressCount === 0) { // if all xhrs were resolved\n                    unobserveChanges(); // make sure to remove old handlers\n                    observeChanges(); // watch for changes to DOM\n                }\n            }\n            function attrUpdateFunc(spec) {\n                return function () {\n                    if (cache[spec.base] !== true) {\n                        if (spec.isXlink) {\n                            spec.useEl.setAttributeNS(xlinkNS, \"xlink:href\", \"#\" + spec.hash);\n                        } else {\n                            spec.useEl.setAttribute(\"href\", \"#\" + spec.hash);\n                        }\n                    }\n                };\n            }\n            function onloadFunc(xhr) {\n                return function () {\n                    var body = document.body;\n                    var x = document.createElement(\"x\");\n                    var svg;\n                    xhr.onload = null;\n                    x.innerHTML = xhr.responseText;\n                    svg = x.getElementsByTagName(\"svg\")[0];\n                    if (svg) {\n                        svg.setAttribute(\"aria-hidden\", \"true\");\n                        svg.style.position = \"absolute\";\n                        svg.style.width = 0;\n                        svg.style.height = 0;\n                        svg.style.overflow = \"hidden\";\n                        body.insertBefore(svg, body.firstChild);\n                    }\n                    observeIfDone();\n                };\n            }\n            function onErrorTimeout(xhr) {\n                return function () {\n                    xhr.onerror = null;\n                    xhr.ontimeout = null;\n                    observeIfDone();\n                };\n            }\n            unobserveChanges(); // stop watching for changes to DOM\n            // find all use elements\n            uses = document.getElementsByTagName(\"use\");\n            for (i = 0; i < uses.length; i += 1) {\n                try {\n                    bcr = uses[i].getBoundingClientRect();\n                } catch (ignore) {\n                    // failed to get bounding rectangle of the use element\n                    bcr = false;\n                }\n                href = uses[i].getAttribute(\"href\");\n                if (!href) {\n                    href = uses[i].getAttributeNS(xlinkNS, \"href\");\n                    isXlink = true;\n                } else {\n                    isXlink = false;\n                }\n                if (href && href.split) {\n                    url = href.split(\"#\");\n                } else {\n                    url = [\"\", \"\"];\n                }\n                base = url[0];\n                hash = url[1];\n                isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;\n                if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n                    // the use element is empty\n                    // if there is a reference to an external SVG, try to fetch it\n                    // use the optional fallback URL if there is no reference to an external SVG\n                    if (fallback && !base.length && hash && !document.getElementById(hash)) {\n                        base = fallback;\n                    }\n                    if (base.length) {\n                        // schedule updating xlink:href\n                        xhr = cache[base];\n                        if (xhr !== true) {\n                            // true signifies that prepending the SVG was not required\n                            setTimeout(attrUpdateFunc({\n                                useEl: uses[i],\n                                base: base,\n                                hash: hash,\n                                isXlink: isXlink\n                            }), 0);\n                        }\n                        if (xhr === undefined) {\n                                xhr = new XMLHttpRequest();\n                                cache[base] = xhr;\n                                xhr.onload = onloadFunc(xhr);\n                                xhr.onerror = onErrorTimeout(xhr);\n                                xhr.ontimeout = onErrorTimeout(xhr);\n                                xhr.open(\"GET\", base);\n                                xhr.send();\n                                inProgressCount += 1;\n                        }\n                    }\n                } else {\n                    if (!isHidden) {\n                        if (cache[base] === undefined) {\n                            // remember this URL if the use element was not empty and no request was sent\n                            cache[base] = true;\n                        } else if (cache[base].onload) {\n                            // if it turns out that prepending the SVG is not necessary,\n                            // abort the in-progress xhr.\n                            cache[base].abort();\n                            delete cache[base].onload;\n                            cache[base] = true;\n                        }\n                    } else if (base.length && cache[base]) {\n                        attrUpdateFunc({\n                            useEl: uses[i],\n                            base: base,\n                            hash: hash\n                        })();\n                    }\n                }\n            }\n            uses = \"\";\n            inProgressCount += 1;\n            observeIfDone();\n        };\n        // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n        window.addEventListener(\"load\", function winLoad() {\n            window.removeEventListener(\"load\", winLoad, false); // to prevent memory leaks\n            tid = setTimeout(checkUseElems, 0);\n        }, false);\n    }\n}());\n"],"sourceRoot":"../.."}