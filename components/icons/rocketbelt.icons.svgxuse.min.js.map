{"version":3,"sources":["components/icons/rocketbelt.icons.svgxuse.min.js"],"names":["window","addEventListener","checkUseElems","tid","cache","Object","create","debouncedCheck","clearTimeout","setTimeout","unobserveChanges","observeChanges","observer","MutationObserver","observe","document","documentElement","childList","subtree","attributes","disconnect","removeEventListener","ignore","xlinkNS","observeIfDone","inProgressCount","attrUpdateFunc","spec","base","isXlink","useEl","setAttributeNS","hash","setAttribute","onloadFunc","xhr","svg","body","x","createElement","onload","innerHTML","responseText","getElementsByTagName","style","position","width","height","overflow","insertBefore","firstChild","onErrorTimeout","onerror","ontimeout","bcr","href","i","isHidden","url","uses","length","getBoundingClientRect","getAttribute","getAttributeNS","split","left","right","top","bottom","undefined","XMLHttpRequest","open","send","abort","winLoad"],"mappings":"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","file":"rocketbelt.icons.svgxuse.min.js","sourcesContent":["/*!\n * @copyright Copyright (c) 2017 IcoMoon.io\n * @license   Licensed under MIT license\n *            See https://github.com/Keyamoon/svgxuse\n * @version   1.2.1\n */\n/*jslint browser: true */\n/*global XDomainRequest, MutationObserver, window */\n(function () {\n    \"use strict\";\n    if (window && window.addEventListener) {\n        var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n        var checkUseElems;\n        var tid; // timeout id\n        var debouncedCheck = function () {\n            clearTimeout(tid);\n            tid = setTimeout(checkUseElems, 100);\n        };\n        var unobserveChanges = function () {\n            return;\n        };\n        var observeChanges = function () {\n            var observer;\n            window.addEventListener(\"resize\", debouncedCheck, false);\n            window.addEventListener(\"orientationchange\", debouncedCheck, false);\n            if (window.MutationObserver) {\n                observer = new MutationObserver(debouncedCheck);\n                observer.observe(document.documentElement, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true\n                });\n                unobserveChanges = function () {\n                    try {\n                        observer.disconnect();\n                        window.removeEventListener(\"resize\", debouncedCheck, false);\n                        window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n                    } catch (ignore) {}\n                };\n            } else {\n                document.documentElement.addEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n                unobserveChanges = function () {\n                    document.documentElement.removeEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n                    window.removeEventListener(\"resize\", debouncedCheck, false);\n                    window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n                };\n            }\n        };\n        var xlinkNS = \"http://www.w3.org/1999/xlink\";\n        checkUseElems = function () {\n            var base;\n            var bcr;\n            var fallback = \"\"; // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n            var hash;\n            var href;\n            var i;\n            var inProgressCount = 0;\n            var isHidden;\n            var isXlink = false;\n            var Request;\n            var url;\n            var uses;\n            var xhr;\n            function observeIfDone() {\n                // If done with making changes, start watching for chagnes in DOM again\n                inProgressCount -= 1;\n                if (inProgressCount === 0) { // if all xhrs were resolved\n                    unobserveChanges(); // make sure to remove old handlers\n                    observeChanges(); // watch for changes to DOM\n                }\n            }\n            function attrUpdateFunc(spec) {\n                return function () {\n                    if (cache[spec.base] !== true) {\n                        if (spec.isXlink) {\n                            spec.useEl.setAttributeNS(xlinkNS, \"xlink:href\", \"#\" + spec.hash);\n                        } else {\n                            spec.useEl.setAttribute(\"href\", \"#\" + spec.hash);\n                        }\n                    }\n                };\n            }\n            function onloadFunc(xhr) {\n                return function () {\n                    var body = document.body;\n                    var x = document.createElement(\"x\");\n                    var svg;\n                    xhr.onload = null;\n                    x.innerHTML = xhr.responseText;\n                    svg = x.getElementsByTagName(\"svg\")[0];\n                    if (svg) {\n                        svg.setAttribute(\"aria-hidden\", \"true\");\n                        svg.style.position = \"absolute\";\n                        svg.style.width = 0;\n                        svg.style.height = 0;\n                        svg.style.overflow = \"hidden\";\n                        body.insertBefore(svg, body.firstChild);\n                    }\n                    observeIfDone();\n                };\n            }\n            function onErrorTimeout(xhr) {\n                return function () {\n                    xhr.onerror = null;\n                    xhr.ontimeout = null;\n                    observeIfDone();\n                };\n            }\n            unobserveChanges(); // stop watching for changes to DOM\n            // find all use elements\n            uses = document.getElementsByTagName(\"use\");\n            for (i = 0; i < uses.length; i += 1) {\n                try {\n                    bcr = uses[i].getBoundingClientRect();\n                } catch (ignore) {\n                    // failed to get bounding rectangle of the use element\n                    bcr = false;\n                }\n                href = uses[i].getAttribute(\"href\");\n                if (!href) {\n                    href = uses[i].getAttributeNS(xlinkNS, \"href\");\n                    isXlink = true;\n                } else {\n                    isXlink = false;\n                }\n                if (href && href.split) {\n                    url = href.split(\"#\");\n                } else {\n                    url = [\"\", \"\"];\n                }\n                base = url[0];\n                hash = url[1];\n                isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;\n                if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n                    // the use element is empty\n                    // if there is a reference to an external SVG, try to fetch it\n                    // use the optional fallback URL if there is no reference to an external SVG\n                    if (fallback && !base.length && hash && !document.getElementById(hash)) {\n                        base = fallback;\n                    }\n                    if (base.length) {\n                        // schedule updating xlink:href\n                        xhr = cache[base];\n                        if (xhr !== true) {\n                            // true signifies that prepending the SVG was not required\n                            setTimeout(attrUpdateFunc({\n                                useEl: uses[i],\n                                base: base,\n                                hash: hash,\n                                isXlink: isXlink\n                            }), 0);\n                        }\n                        if (xhr === undefined) {\n                                xhr = new XMLHttpRequest();\n                                cache[base] = xhr;\n                                xhr.onload = onloadFunc(xhr);\n                                xhr.onerror = onErrorTimeout(xhr);\n                                xhr.ontimeout = onErrorTimeout(xhr);\n                                xhr.open(\"GET\", base);\n                                xhr.send();\n                                inProgressCount += 1;\n                        }\n                    }\n                } else {\n                    if (!isHidden) {\n                        if (cache[base] === undefined) {\n                            // remember this URL if the use element was not empty and no request was sent\n                            cache[base] = true;\n                        } else if (cache[base].onload) {\n                            // if it turns out that prepending the SVG is not necessary,\n                            // abort the in-progress xhr.\n                            cache[base].abort();\n                            delete cache[base].onload;\n                            cache[base] = true;\n                        }\n                    } else if (base.length && cache[base]) {\n                        attrUpdateFunc({\n                            useEl: uses[i],\n                            base: base,\n                            hash: hash\n                        })();\n                    }\n                }\n            }\n            uses = \"\";\n            inProgressCount += 1;\n            observeIfDone();\n        };\n        // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n        window.addEventListener(\"load\", function winLoad() {\n            window.removeEventListener(\"load\", winLoad, false); // to prevent memory leaks\n            tid = setTimeout(checkUseElems, 0);\n        }, false);\n    }\n}());\n"],"sourceRoot":"../.."}