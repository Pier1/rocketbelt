$primary: #009ee1;

$brand-palette: (
  base: $primary,
  deepBlue:  #2e2b70,
  warmRed:   #f04e37,
  sand:      #fed4a0,
  deepBrown: #431e1b,
  sunYellow: #fdb913,
  paleRed:   #e58d83,
  mint:      #7cccbf
);

$contrast-palette: (
  brand:    #1078a7,
  base:     #1078a7,
  deepBlue: #201e4e,
  warmRed:  #e42b11,
  mint:     #338275
);

$base-families: (
  sale: map-get($contrast-palette, warmRed),
  primary: $primary,
  secondary: map-get($brand-palette, mint),
  accent: adjust-hue($primary, 60),
  gray: #767676,
  success: #2ca658,
  warning: map-get($brand-palette, sunYellow),
  error: map-get($contrast-palette, warmRed),
  info: map-get($contrast-palette, deepBlue),
  black: scale-color(#000, $lightness: 10%),
  white: scale-color(#fff, $lightness: 0%)
);

$base-variants: (
  base: 0,
  lighter: 0.4,
  lightest: 0.8,
  darker: -0.2,
  darkest: -0.5
);

$gray-variants: (
  base: 0,
  plus1: 0.2,
  plus2: 0.4,
  plus3: 0.6,
  plus4: 0.8,
  plus5: 0.9,
  minus1: -0.2,
  minus2: -0.4,
);

$black-white-variants: (base: 0);

@function build-families() {
  $families: (
    brand: $brand-palette,
    contrast: $contrast-palette
  );

  @each $family, $color in $base-families {
    $variants: ();

    $v: if($family == gray, $gray-variants,
          if($family == black or $family == white, $black-white-variants,
          $base-variants)
        );

    @each $variant, $percentage in $v {
      $variants: map-merge($variants, (#{$variant}: scale-color($color, $lightness: percentage($percentage))));
    }

    $families: map-merge($families, (#{$family}: $variants));
  }

  @return $families;
}

$color-families: build-families();
