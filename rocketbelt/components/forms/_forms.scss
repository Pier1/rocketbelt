.form-group,
fieldset {
  display: flex;
  flex-direction: column;

  &:not(:last-child) {
    margin-bottom: margin(2);
  }

  label,
  legend {
    font-size: font-size(0);
    align-self: flex-start;

    &::after {
      color: color(gray);
    }
  }
}

.form-group:not(.inline) {
  .messages {
    display: flex;
    flex-wrap: wrap;
  }
}

.form-group {
  @include vset(--required-text, ' (required)');
  @include vset(--optional-text, ' (optional)');

  label::after {
    font-size: font-size(-1);
  }

  [required] {
    & + label::after {
      content: vget(--required-text);
    }
  }

  :not([required]) {
    & + label::after {
      content: vget(--required-text);
    }
  }

  .read-only {
    &[disabled] {
      & ~ label::after {
        content: none;
      }
    }
  }

  .required-suppressed {
    &[required] {
      & + label::after {
        content: '';
      }
    }

    &:not([required]) {
      & + label::after {
        content: '';
      }
    }
  }

  .helper-text {
    color: color(gray);
  }

  .validation-message {
    color: color(error);
  }

  .helper-text,
  .validation-message {
    font-size: font-size(-1);
  }

  &.inline {
    @include vset(--required-text, '(required)');
    @include vset(--optional-text, '(optional)');

    flex-direction: row;
    align-items: center;

    &:first-child {
      margin-top: margin(2);
    }

    .helper-text,
    label {
      flex: 0 0 auto;
      align-self: center;
    }

    label {
      display: flex;
      flex-direction: column;
      padding-right: ms(-4);
    }

    .helper-text {
      padding-left: ms(-4);
    }

    .messages {
      display: flex;
      flex-direction: column;
      flex: 0 0 auto;
      padding-left: ms(-4);
      order: last;

      .helper-text {
        padding-left: 0;
      }

      .helper-text,
      .validation-message {
        align-self: flex-start;
      }
    }

    :focused {
      overflow: auto;
    }
  }

  &.inline-with-button {
    font-size: font-size(0);

    input {
      height: 2rem;
      outline: 0;
      border: 1px solid color(gray, plus1);
      border-right: 0;

      &:focus {
        outline: 0;
        border: 2px solid color(primary);
        border-right: 0;

        & ~ .button {
          outline: 0;
          border: 2px solid color(primary);
          border-left: 0;
          transition: none;
        }
      }

      &[invalid] {
        outline: 0;
        border: 2px solid color(error);
        border-right: 0;

        & ~ .button {
          border: 2px solid color(error);
          border-left: 0;
        }
      }
    }

    .button {
      min-width: auto;
      height: 2rem;
      border: 1px solid color(gray, plus1);
      border-left: 0;
      background: transparent;
      box-shadow: none;
      line-height: 1;

      &:hover,
      &:active {
        box-shadow: none;
      }
    }

    &.inline-with-button-stacked {
      flex-wrap: wrap;

      input {
        // Must keep unit on zero-value for flex-basis here to avoid an IE bug.
        // See https://github.com/Pier1/rocketbelt/pull/182.
        flex: 1 0 0px; // sass-lint:disable-line zero-unit
        min-width: 0;
        width: auto;
      }

      label {
        flex-direction: row;
        width: 100%;
        align-items: baseline;

        &::after {
          margin-left: 0.25em;
        }
      }

      button,
      .button {
        flex: 0 1 auto;
      }

      .messages {
        padding-left: 0;
        width: 100%;
      }
    }
  }
}

html {
  &.touchevents {
    input,
    select {
      min-height: 44px;
    }
  }
}

input:not([type='checkbox']),
select {
  min-height: 2rem;
}

input {
  &[type='radio'],
  &[type='checkbox'] {
    &:focus {
      ~ label {
        outline: thin dotted color(primary);
      }
    }
  }

  &.rb-checkbox[type='checkbox'],
  &[type='radio'] {
    &[disabled] + label {
      color: color(gray, plus2);
    }
  }
}

input:not([type='radio']),
input:not([type='checkbox']),
select,
textarea {
  display: block;
  padding: ms(-12) ms(-10);
  width: 100%;
  border: 1px solid color(gray, plus1);
  font-size: font-size(0);

  & + label {
    order: -1;
  }

  &:focus {
    overflow: hidden;
    outline: 2px solid color(primary);

    &.invalid {
      outline-color: color(error);
    }
  }

  &[disabled] {
    border-color: transparent;
    background-color: color(gray, plus3);
  }

  &.invalid {
    border-width: 2px;
    border-color: color(error);

    & ~ .messages {
      .validation-message {
        display: block;
        visibility: visible;
        color: color(error);

        + .helper-text::before {
          color: color(gray);
          content: unicode(nbsp) + unicode('horizontal-bar') + unicode(nbsp);
        }
      }
    }
  }

  &:valid:not(.invalid) {
    & ~ .messages {
      .validation-message {
        display: none;
        visibility: hidden;
      }
    }
  }

  // Character Based Ems - Good Idea??
  &.field-small {
    width: 8em;
  }

  &.field-medium {
    width: 16em;
  }

  &.field-large {
    width: 24em;
  }

  &.read-only {
    &[disabled] {
      margin-bottom: 0;
      padding: 0;
      border-width: 1px;
      border-color: transparent;
      border-left-width: 0;
      background: transparent;
      color: color(gray);
      font-size: 1rem;
      opacity: 1;
    }
  }
}

[disabled] {
  opacity: 0.6;
  filter: grayscale(0.6);
  transition: opacity 500ms ease;
}

select {
  $fill: color(black);

  padding-right: 25px;
  border-radius: 0;
  background-color: color(white);
  background-image: icon-as-data-uri(chevron-down, $fill);
  background-position: right 0.5rem center;
  background-size: 1rem;
  background-repeat: no-repeat;
  appearance: none;

  &.field-auto {
    margin-right: auto;
    padding-right: 2em;
    width: auto;
  }
}

textarea {
  &.read-only {
    &[disabled] {
      resize: none;
    }
  }
}

fieldset {
  margin: 0;
  padding: 0;
  border: 0;

  &[required] {
    legend::after {
      content: ' (required)';
    }
  }

  &:not([required]) {
    legend::after {
      content: ' (optional)';
    }
  }
}
