{"version":3,"sources":["base/typography/rocketbelt.typography.min.js"],"names":["rb","document","$","typography","shave","target","opts","arguments","length","undefined","maxHeight","Error","els","querySelectorAll","character","classname","clampedMarkup","charClassname","spaces","truncationMarkup","i","el","classList","add","span","querySelector","textProp","textContent","words","fullText","split","styles","height","maxHeightStyle","heightStyle","pivot","min","insertAdjacentHTML","slice","charHtml","join","max","offsetHeight","diff","unclamp","clamp","numLines","getComputedStyle","replace","lineHeight","forEach","dispatchEvent","CustomEvent","onClamp","onUnclamp","once","button","click","this","closest","first","selector","window","jQuery"],"mappings":"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","file":"rocketbelt.typography.min.js","sourcesContent":["'use strict';\n((rb, document, $) => {\n  rb.typography = rb.typography || {};\n\n  const clamp = (target, numLines, opts) => {\n    const lineHeight =\n      getComputedStyle(document.querySelectorAll(target)[0]).lineHeight.replace('px', '');\n    const maxHeight = numLines * lineHeight;\n\n    shave(target, maxHeight, opts);\n\n    const els = document.querySelectorAll(target);\n    els.forEach((el) => {\n      el.dispatchEvent(new CustomEvent('rb.typography.clamp'));\n\n      if (opts) {\n        if (opts.onClamp) {\n          opts.onClamp(el);\n        }\n\n        if (opts.onUnclamp) {\n          rb.once(el, 'rb.typography.unclamp', opts.onUnclamp);\n        }\n      }\n\n      const button = el.querySelector('button');\n      if (button) {\n        $(button).click(function buttonClick() {\n          rb.typography.unclamp($(this).closest('.clampable-clamped').first());\n        });\n      }\n    });\n  };\n\n  const shave = (target, maxHeight, opts = {}) => {\n    /* eslint-disable */\n    /**\n      shave - Shave is a javascript plugin that truncates multi-line text within a html element based on set max height\n      @version v2.4.0\n      @link https://github.com/dollarshaveclub/shave#readme\n      @author Jeff Wainwright <yowainwright@gmail.com> (jeffry.in)\n      @license MIT\n    **/\n    if (!maxHeight) throw Error('maxHeight is required')\n    let els = (typeof target === 'string') ? document.querySelectorAll(target) : target\n    if (!els) return\n\n    const character = opts.character || '…'\n    const classname = opts.classname || 'clampable_clamped-text'\n    const charClassname = 'clampable_clamped-placeholder'\n    const truncationMarkup = opts.clampedMarkup\n    const spaces = typeof opts.spaces === 'boolean' ? opts.spaces : true\n    const charHtml =\n      truncationMarkup ?\n        `<span class=\"${charClassname}\">… ${truncationMarkup}</span>` :\n        `<span class=\"${charClassname}\">${character}</span>`\n\n    if (!('length' in els)) els = [els]\n    for (let i = 0; i < els.length; i += 1) {\n      const el = els[i]\n      el.classList.add('clampable-clamped');\n\n      const styles = el.style\n      const span = el.querySelector(`.${classname}`)\n      const textProp = el.textContent === undefined ? 'innerText' : 'textContent'\n\n      // If element text has already been shaved\n      if (span) {\n        // Remove the ellipsis to recapture the original text\n        el.removeChild(el.querySelector(`.${charClassname}`))\n        el[textProp] = el[textProp] // eslint-disable-line\n        // nuke span, recombine text\n      }\n\n      const fullText = el[textProp]\n      const words = spaces ? fullText.split(' ') : fullText\n      // If 0 or 1 words, we're done\n      if (words.length < 2) continue\n\n      // Temporarily remove any CSS height for text height calculation\n      const heightStyle = styles.height\n      styles.height = 'auto'\n      const maxHeightStyle = styles.maxHeight\n      styles.maxHeight = 'none'\n\n      // If already short enough, we're done\n      if (el.offsetHeight <= maxHeight) {\n        styles.height = heightStyle\n        styles.maxHeight = maxHeightStyle\n        continue\n      }\n\n      if (maxHeight === 'auto') {\n        styles.maxHeight = maxHeightStyle\n        continue\n      }\n\n      // Binary search for number of words which can fit in allotted height\n      let max = words.length - 1\n      let min = 0\n      let pivot\n      while (min < max) {\n        pivot = (min + max + 1) >> 1 // eslint-disable-line no-bitwise\n        el[textProp] = spaces ? words.slice(0, pivot).join(' ') : words.slice(0, pivot)\n        el.insertAdjacentHTML('beforeend', charHtml)\n        if (el.offsetHeight > maxHeight) max = spaces ? pivot - 1 : pivot - 2\n        else min = pivot\n      }\n\n      el[textProp] = spaces ? words.slice(0, max).join(' ') : words.slice(0, max)\n      el.insertAdjacentHTML('beforeend', charHtml)\n      const diff = spaces ? ` ${words.slice(max).join(' ')}` : words.slice(max)\n\n      el.insertAdjacentHTML(\n        'beforeend',\n        `<span class=\"${classname}\" style=\"display:none;\">${diff}</span>`\n      );\n\n      styles.height = heightStyle;\n      styles.maxHeight = maxHeightStyle\n    }\n    /* eslint-enable */\n  };\n\n  const unclamp = (selector) => {\n    shave(selector, 'auto');\n\n    const els = (typeof selector === 'string') ? document.querySelectorAll(selector) : selector;\n    for (let i = 0; i < els.length; i++) {\n      const el = els[i];\n      el.dispatchEvent(new CustomEvent('rb.typography.unclamp'));\n    }\n  };\n\n  rb.typography.clamp = clamp;\n  rb.typography.unclamp = unclamp;\n})(window.rb, document, jQuery);\n"],"sourceRoot":"../.."}