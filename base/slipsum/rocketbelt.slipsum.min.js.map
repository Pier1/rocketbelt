{"version":3,"sources":["base/slipsum/rocketbelt.slipsum.min.js"],"names":["randomIntFromInterval","min","max","Math","floor","random","cache","require","sentences","targetNumSentences","currentWord","str","numSentences","rand","length","pattern","match","r","replace","paragraphs","targetNumParagraphs","paras","i","slipsum","module","exports","root","call","this"],"mappings":"CAEA,WACE,YAgDA,SAASA,GAAsBC,EAAIC,GAE/B,MAAOC,MAAKC,MAAMD,KAAKE,UAAUH,EAAID,EAAI,GAAGA,GA9ChD,GAAIK,GAAQC,QAAQ,kCAAmC,SAiDnDC,EAAY,SAAUC,GAKxB,IAJA,GAAIC,GAAc,SACdC,EAAM,GAENC,EAAe,EACZA,EAAeH,GAAoB,CAExC,GAAII,GAAOV,KAAKC,MAAMD,KAAKE,SAAWC,EAAMI,GAAaI,OAIzD,IAHAH,GAAOL,EAAMI,GAAaG,GAGrBP,EAAMA,EAAMI,GAAaG,IAWzB,CACHH,EAAcJ,EAAMI,GAAaG,EACjC,IAAIE,GAAU,cAEd,IAAIL,EAAYM,MAAMD,GAAU,CAC9B,GAAIE,GAAId,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,CAE/B,KAANY,EACFP,EAAYQ,QAAQH,EAAS,QAEtBE,GAAK,GAAKA,EAAI,EACrBP,EAAYQ,QAAQH,EAAS,OAEtBE,GAAK,GAAKA,EAAI,GACrBP,EAAYQ,QAAQH,EAAS,OAG/BH,GAAgB,EAGdA,IAAiBH,IACnBE,GAAO,SAhC2B,CAEpC,GADAD,EAAc,UACTJ,EAAMI,GAAaG,GAAMG,MAAM,OAAQ,CAC1CL,GAAO,KACPC,GAAgB,CAChB,OAGAD,GAAO,KA6Bb,MAAOA,IAGLQ,EAAa,SAAUC,GAGzB,IAAK,GAFDC,GAAQ,GAEHC,EAAI,EAAGA,EAAIF,EAAqBE,IAAK,CAC5C,GAAIT,GAAOb,EAAsB,EAAG,EACpCqB,IAASb,EAAUK,GACnBQ,GAAS,OAIX,MADAA,GAAMH,QAAQ,YAAa,IACpBG,GAGLE,GACFf,UAAWA,EACXW,WAAYA,EAGdK,QAAOC,SACLF,QAASA,GAGY,mBAAZE,UACY,mBAAXD,SAA0BA,OAAOC,UACzCA,QAAUD,OAAOC,QAAUF,GAE7BE,QAAQF,QAAUA,GAGlBG,KAAKH,QAAUA,IAEhBI,KAAKC","file":"rocketbelt.slipsum.min.js","sourcesContent":["// See http://www.bitsofpancake.com/programming/markov-chain-text-generator/\n\n(function () {\n  'use strict';\n\n  // var fs = require('fs');\n\n  var cache = require('./rocketbelt.slipsum-cache.json', 'utf-8');\n\n  // var buildCache = function () {\n  //   if (cache) {\n  //     return;\n  //   }\n  //   else {\n  //     cache = {\n  //       '_START': []\n  //     }\n  //   }\n  //\n  //   // Get the source text and split it into words\n  //   var text = fs.existsSync('./slipsum-seed.txt') ?\n  //     fs.readFileSync('./slipsum-seed.txt', 'utf-8').split(/\\s+/g) :\n  //     null\n  //   ;\n  //\n  //   if (!text) {\n  //     return;\n  //   }\n  //\n  //   // Add it to the start node's list of possibility\n  //   cache['_START'].push(text[0]);\n  //\n  //   // Go through each word and add it to the previous word's node\n  //   for (var i = 0; i < text.length - 1; i++) {\n  //     if (!cache[text[i]]) {\n  //       cache[text[i]] = [];\n  //     }\n  //\n  //     cache[text[i]].push(text[i + 1]);\n  //\n  //     // If it's the beginning of a sentence, add the next word to the start node too\n  //     if (text[i].match(/\\.$/)) {\n  //       cache['_START'].push(text[i + 1]);\n  //     }\n  //\n  //     if (i === (text.length-2)) {\n  //       fs.writeFile('./slipsum-cache.json', JSON.stringify(cache, null, 2));\n  //     }\n  //   }\n  // };\n\n  function randomIntFromInterval(min,max)\n  {\n      return Math.floor(Math.random()*(max-min+1)+min);\n  }\n\n  var sentences = function (targetNumSentences) {\n    var currentWord = '_START';\n    var str = '';\n\n    var numSentences = 0;\n    while (numSentences < targetNumSentences) {\n      // Follow a random node, append it to the string, and move to that node\n      var rand = Math.floor(Math.random() * cache[currentWord].length);\n      str += cache[currentWord][rand];\n\n      // No more nodes to follow? Start again. (Add a period to make things look better.)\n      if (!cache[cache[currentWord][rand]]) {\n        currentWord = '_START';\n        if (!cache[currentWord][rand].match(/\\.$/)) {\n          str += '. ';\n          numSentences += 1;\n          break;\n        }\n        else {\n          str += ' ';\n        }\n      }\n      else {\n        currentWord = cache[currentWord][rand];\n        var pattern = /[.!?](\\s?)$/g;\n\n        if (currentWord.match(pattern)) {\n          var r = Math.floor(Math.random() * 19) + 1;\n\n          if (r === 1) {\n            currentWord.replace(pattern, '?!$1');\n          }\n          else if (r >= 2 && r < 4) {\n            currentWord.replace(pattern, '?$1');\n          }\n          else if (r >= 4 && r < 7) {\n            currentWord.replace(pattern, '!$1');\n          }\n\n          numSentences += 1;\n        }\n\n        if (numSentences !== targetNumSentences) {\n          str += ' ';\n        }\n      }\n    }\n\n    return str;\n  }\n\n  var paragraphs = function (targetNumParagraphs) {\n    var paras = '';\n\n    for (var i = 0; i < targetNumParagraphs; i++) {\n      var rand = randomIntFromInterval(4, 8);\n      paras += sentences(rand);\n      paras += '\\n\\n';\n    }\n\n    paras.replace(/[\\s\\n]+$/g, '');\n    return paras;\n  }\n\n  var slipsum = {\n    sentences: sentences,\n    paragraphs: paragraphs\n  }\n\n  module.exports = {\n    slipsum: slipsum\n  }\n\n  if (typeof exports !== 'undefined') {\n    if(typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = slipsum;\n    }\n    exports.slipsum = slipsum;\n  }\n  else {\n    root.slipsum = slipsum;\n  }\n}).call(this);\n"],"sourceRoot":"../.."}