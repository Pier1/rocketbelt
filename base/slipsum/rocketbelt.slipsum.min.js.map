{"version":3,"sources":["base/slipsum/rocketbelt.slipsum.min.js"],"names":["cache","require","sentences","currentWord","targetNumSentences","str","numSentences","rand","length","pattern","Math","match","replace","r","module","slipsum","paragraphs","targetNumParagraphs","paras","min","max","i","floor","random","exports","root","call","this"],"mappings":"CAEA,WACE,aAIA,IAAIA,EAAQC,QAAQ,kCAAmC,SAkDrD,IAAAC,EAAIC,SAAcC,GAKhB,IAJF,IAAIC,EAAJ,SAAIA,EAAM,GAGVC,EAAOA,EACLA,EAAAF,GAAA,CAEAC,IAAAA,EAAOL,KAAMG,MAAAA,KAAaI,SAA1BP,EAAAG,GAAAK,QAIEL,GAJFE,GAAOL,EAAMG,GAAaI,GAIxBJ,EAAAA,EAAcA,GAAdI,IAUG,CAKD,IAAAE,EAAQC,eAER,IAHFP,EAAIA,EAAYQ,GAAgBJ,IAGjBI,MAAAF,GAAA,CACXN,IAAAA,EAAAA,KAAAA,MAA6B,GAAjBS,KAAQH,UAApB,EAGAN,IAAAA,EADGA,EAGIU,QAAUA,EAAO,QAEzB,GAAAA,GAAAA,EAAA,EAJCV,EAAYS,QAAQH,EAAS,OAOhC,GAAAI,GAAAA,EAAA,GAJGV,EAAYS,QAAQH,EAAS,OAQhCH,GAAA,EAFGA,IAAiBF,IAMzBC,GAAA,SApCI,CAEEA,IAAAA,EADFF,EAAWA,UACTI,GAAAI,MAAA,OAAA,CACAL,GAAAA,KACAA,GAAA,EAHF,MAFFD,GAWK,KA0BP,OAAOA,GAqBTS,EAAA,CACEC,UAASA,EADXC,WAbad,SAAAe,GAFX,IAGEC,IA9D2BC,EAA/BC,EA8DIF,EAAS,GAHFG,EAAI,EAAGA,EAAIJ,EAAqBI,IAAK,CAM9CH,IAAMN,GAjEuBO,EAiE7B,EAjEFC,EAiEE,EA9DDV,KAAAY,MAAAZ,KAAAa,UAAAH,EAAAD,EAAA,GAAAA,IA+DCD,GAAOA,EAAPX,GAVFW,GAAA,OAeEF,OADAd,EAAAA,QAAWA,YADC,IAEZc,IAQAF,OAAGU,QAAOV,CACRU,QAAAA,GAIC,oBAAAA,SACYT,oBAAVA,QAALD,OAAAU,UACDA,QAAAV,OAAAU,QAAAT,GAJCS,QAAQT,QAAUA,GAGlBU,KAAKV,QAAUA,IAEhBW,KAAKC","file":"rocketbelt.slipsum.min.js","sourcesContent":["// See http://www.bitsofpancake.com/programming/markov-chain-text-generator/\n\n(function () {\n  'use strict';\n\n  // var fs = require('fs');\n\n  var cache = require('./rocketbelt.slipsum-cache.json', 'utf-8');\n\n  // var buildCache = function () {\n  //   if (cache) {\n  //     return;\n  //   }\n  //   else {\n  //     cache = {\n  //       '_START': []\n  //     }\n  //   }\n  //\n  //   // Get the source text and split it into words\n  //   var text = fs.existsSync('./slipsum-seed.txt') ?\n  //     fs.readFileSync('./slipsum-seed.txt', 'utf-8').split(/\\s+/g) :\n  //     null\n  //   ;\n  //\n  //   if (!text) {\n  //     return;\n  //   }\n  //\n  //   // Add it to the start node's list of possibility\n  //   cache['_START'].push(text[0]);\n  //\n  //   // Go through each word and add it to the previous word's node\n  //   for (var i = 0; i < text.length - 1; i++) {\n  //     if (!cache[text[i]]) {\n  //       cache[text[i]] = [];\n  //     }\n  //\n  //     cache[text[i]].push(text[i + 1]);\n  //\n  //     // If it's the beginning of a sentence, add the next word to the start node too\n  //     if (text[i].match(/\\.$/)) {\n  //       cache['_START'].push(text[i + 1]);\n  //     }\n  //\n  //     if (i === (text.length-2)) {\n  //       fs.writeFile('./slipsum-cache.json', JSON.stringify(cache, null, 2));\n  //     }\n  //   }\n  // };\n\n  function randomIntFromInterval(min,max)\n  {\n      return Math.floor(Math.random()*(max-min+1)+min);\n  }\n\n  var sentences = function (targetNumSentences) {\n    var currentWord = '_START';\n    var str = '';\n\n    var numSentences = 0;\n    while (numSentences < targetNumSentences) {\n      // Follow a random node, append it to the string, and move to that node\n      var rand = Math.floor(Math.random() * cache[currentWord].length);\n      str += cache[currentWord][rand];\n\n      // No more nodes to follow? Start again. (Add a period to make things look better.)\n      if (!cache[cache[currentWord][rand]]) {\n        currentWord = '_START';\n        if (!cache[currentWord][rand].match(/\\.$/)) {\n          str += '. ';\n          numSentences += 1;\n          break;\n        }\n        else {\n          str += ' ';\n        }\n      }\n      else {\n        currentWord = cache[currentWord][rand];\n        var pattern = /[.!?](\\s?)$/g;\n\n        if (currentWord.match(pattern)) {\n          var r = Math.floor(Math.random() * 19) + 1;\n\n          if (r === 1) {\n            currentWord.replace(pattern, '?!$1');\n          }\n          else if (r >= 2 && r < 4) {\n            currentWord.replace(pattern, '?$1');\n          }\n          else if (r >= 4 && r < 7) {\n            currentWord.replace(pattern, '!$1');\n          }\n\n          numSentences += 1;\n        }\n\n        if (numSentences !== targetNumSentences) {\n          str += ' ';\n        }\n      }\n    }\n\n    return str;\n  }\n\n  var paragraphs = function (targetNumParagraphs) {\n    var paras = '';\n\n    for (var i = 0; i < targetNumParagraphs; i++) {\n      var rand = randomIntFromInterval(4, 8);\n      paras += sentences(rand);\n      paras += '\\n\\n';\n    }\n\n    paras.replace(/[\\s\\n]+$/g, '');\n    return paras;\n  }\n\n  var slipsum = {\n    sentences: sentences,\n    paragraphs: paragraphs\n  }\n\n  module.exports = {\n    slipsum: slipsum\n  }\n\n  if (typeof exports !== 'undefined') {\n    if(typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = slipsum;\n    }\n    exports.slipsum = slipsum;\n  }\n  else {\n    root.slipsum = slipsum;\n  }\n}).call(this);\n"],"sourceRoot":"../.."}